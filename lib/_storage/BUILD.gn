# Copyright 2018 Mumba. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build_overrides/build.gni")
import("//third_party/protobuf/proto_library.gni")

config("sqlite_warnings") {
  cflags = []
  if (is_clang) {
    cflags += [ "-Wno-sign-compare" ]
    cflags += [ "-Wno-writable-strings" ]
    cflags += [ "-Wno-sometimes-uninitialized" ]
    cflags += [ "-Wno-unused-function" ]
    cflags += [ "-Wno-deprecated-register" ]
    cflags += [ "-Wno-unused-value" ]
    cflags += [ "-Wno-implicit-function-declaration" ]
    cflags += [ "-Wno-int-conversion" ]
    cflags += [ "-Wno-string-conversion" ]
    cflags += [ "-Wno-uninitialized" ]
  }
}

static_library("sqlite_btree") { 
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    "//build/config/compiler:no_chromium_code",
    ":sqlite_warnings"
  ]

  sources = [
    "db/btree.cc",
    "db/btree.h",
    "db/btreeInt.h",
    "db/sqliteInt.h",
    "db/sqlite3.h",
    "db/sqlite3.c",
  ]

  deps = [
    "//third_party/icu",
  ]
  
  defines = [
    "SQLITE_ENABLE_ICU",
    #"SQLITE_ENABLE_MEMORY_MANAGEMENT",
    "SQLITE_SECURE_DELETE",
    "SQLITE_MAX_MMAP_SIZE=0x7fff0000",
    #"SQLITE_MMAP_READ_ONLY=1",
    "SQLITE_THREADSAFE=2",
    #"SQLITE_THREADSAFE=1",
    "SQLITE_OMIT_AUTOINIT",
    "SQLITE_CORE",
    "SQLITE_DEFAULT_PAGE_SIZE=65536"
  ]
  
  if (is_posix) {
    sources += [
      #"sqlite/mutex_unix.c",
      #"sqlite/os_unix.c",
    ]
    defines += [
      "HAVE_USLEEP=1",
      "USE_PREAD=1"
    ]
  }
  
  if (is_linux || is_android) {
    defines += [
      "fdatasync=fdatasync"
    ]
  }
  
  if (is_linux) {
    defines += [
      "HAVE_MALLOC_H",
      "HAVE_MALLOC_USABLE_SIZE"
    ]
  } 
  if (is_win) {
    sources += [
      #"sqlite/mutex_w32.c",
      #"sqlite/os_win.c"
    ]
  }
}

component("storage") {
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
        "//build/config/compiler:no_chromium_code",
  ]
  deps = [
    ":sqlite_btree",
    ":proto_lite",
    "//lib/base",
    #"//lib/graph",
    "//lib/url",
    "//lib/crypto",
    "//lib/net",
    #"//lib/components/base32",
    "//third_party/zlib",
    "//third_party/zlib/google:zip",
    #"//third_party/libxml",
   # "//third_party/libtorrent",
    #"//v8"
  ]
  public_deps = [
    "//third_party/protobuf:protobuf_lite",
    "//third_party/libtorrent",
    #"//third_party/zetasql",
  ]
  defines = [
    "NET_BUILD_STRESS_CACHE"
  ]
  cflags = [
    "-Wno-macro-redefined",
    "-Wno-ignored-qualifiers"
  ]
  include_dirs = [
      "//third_party",
      "$root_gen_dir/third_party"
  ]
  sources = [
    "db/arena.h",
    "db/arena.cc",
    "db/memory.h",
    "db/memory.cc",
    "db/db.h",
    "db/db.cc",
    "backend/storage_backend.cc",
    "backend/storage_backend.h",
    "backend/backend_utils.cc",
    "backend/backend_utils.h",
    "backend/backend_utils_win.cc",
    "backend/addr.cc",
    "backend/addr.h",
    "backend/bitmap.cc",
    "backend/bitmap.h",
    "backend/block_files.cc",
    "backend/block_files.h",
    "backend/storage_format.cc",
    "backend/storage_format.h",
    "backend/storage_format_base.h",
    "backend/storage_entry.cc",
    "backend/storage_entry.h",
    "backend/errors.h",
    "backend/manifest.cc",
    "backend/manifest.h",
    "backend/eviction.cc",
    "backend/eviction.h",
    "backend/experiments.h",
    "backend/file.cc",
    "backend/file.h",
    "backend/file_block.h",
    "backend/file_ios.cc",
    "backend/file_lock.cc",
    "backend/file_lock.h",
    "backend/file_win.cc",
    "backend/histogram_macros.h",
    "backend/in_flight_backend_io.cc",
    "backend/in_flight_backend_io.h",
    "backend/in_flight_io.cc",
    "backend/in_flight_io.h",
    "backend/mapped_file.cc",
    "backend/mapped_file.h",
    "backend/mapped_file_win.cc",
    "backend/rankings.cc",
    "backend/rankings.h",
    "backend/sparse_control.cc",
    "backend/sparse_control.h",
    "backend/stats.cc",
    "backend/stats.h",
    "backend/storage_block-inl.h",
    "backend/storage_block.h",
    "backend/stress_support.h",
    "backend/trace.cc",
    "backend/trace.h",
    "backend/webfonts_histogram.cc",
    "backend/webfonts_histogram.h",
    "hash.cc",
    "hash.h",
    "storage_sqlite.cc",
    "storage_sqlite.h",
    "file_set.cc",
    "file_set.h",
    #"tree_catalog.cc",
    #"tree_catalog.h",
    "storage_info.h",
    "merkle_tree.cc",
    "merkle_tree.h",
    #"catalog.h",
    #"block.cc",
    #"block.h",
    #"data_catalog.cc",
    #"data_catalog.h",
    #"blob_catalog.cc",
    #"blob_catalog.h",
    #"blob_table.cc",
    #"blob_table.h",
    #"data_table.cc",
    #"data_table.h",
    #"data_types.h",
    #"data_column.cc",
    #"data_column.h",
    #"data_common.cc",
    #"data_common.h",
    "storage.cc",
    "storage.h",
    "storage_constants.cc",
    "storage_constants.h",
    "storage_file.cc",
    "storage_file.h",
    #"disk_resource.h",
    #"disk_resource.cc",
    "storage_utils.cc",
    "storage_utils.h",
    "io_handler.h",
    "io_entity.h",
    "torrent_observer.h",
    "torrent.cc",
    "torrent.h",
    "torrent_cache.h",
    "torrent_manager.cc",
    "torrent_manager.h",
    "storage_manager.cc",
    "storage_manager.h",
    "io_completion_callback.cc",
    "io_completion_callback.h",
    "torrent_storage.cc",
    "torrent_storage.h"
  ]
  if (is_posix || is_fuchsia) {
      sources += [
        "backend/file_posix.cc",
        "backend/backend_utils_posix.cc",
        "backend/mapped_file_posix.cc"
      ]
  }
}

group("proto_lite") {
    public_deps = [
      ":proto",
      "//third_party/protobuf:protobuf_lite",
    ]
}

proto_library("proto") {
    sources = [
      "proto/storage.proto",
    ]
    cc_generator_options = "dllexport_decl=STORAGE_EXPORT:"
    cc_include = "storage/storage_export.h"
}

executable("storage_exe") {
    configs -= [ "//build/config/compiler:chromium_code" ]
    configs += [
        "//build/config/compiler:no_chromium_code",
    ]
    output_name = "storage"
    deps = [
       ":storage",
       "//lib/base",
       "//lib/url",
       "//lib/crypto",
       "//lib/net",
       #"//v8",
       "//third_party/zetasql",
       "//buildtools/third_party/libc++"
    ]
    include_dirs = [
      "//third_party"
    ]
    cflags = [
      "-Wno-macro-redefined",
      "-Wno-ignored-qualifiers"
    ]
    public_deps = [
      "//third_party/libtorrent",
    ]
    sources = [
      "cmd/command_clone.cc",
      #"cmd/command_copy.cc",
      "cmd/command_blob.cc",
      "cmd/command_client.cc",
      "cmd/command_create.cc",
      "cmd/command_database.cc",
      "cmd/command_get.cc",
      "cmd/command_help.cc",
      "cmd/command_info.cc",
      "cmd/command_list.cc",
      "cmd/command_ls.cc",
      "cmd/command_put.cc",
#      "cmd/command_query.cc",
      "cmd/command_sample.cc",
      "cmd/command_server.cc",
      "cmd/command_session.cc",
      "cmd/command_sign.cc",
      "cmd/command_start.cc",
      "cmd/command_stop.cc",
      "cmd/command_torrent.cc",
      "cmd/commands.cc",
      "cmd/commands.h",
      "cmd/storage_main.cc",
    ]   
}
