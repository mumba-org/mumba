# Copyright 2019 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Each MNO below has a unique three digit ID, specified before the MNO.
# You should use this ID to generate unique fields where needed.
# Specificially, in the mccmnc, name, uuid fields.

# Test[101]: MNOByMCCMNC
mno {
  data {
    mccmnc: "101001"
    localized_name {
      name: "name101"
    }
    uuid: "uuid101"
  }
}

# Test[102]: MNOByMCCMNCMultipleMCCMNCOptions
mno {
  data {
    mccmnc: "102001"
    mccmnc: "102002"
    localized_name {
      name: "name102"
    }
    uuid: "uuid102"
  }
}

# Test[103]: MNOByOperatorName
mno {
  data {
    mccmnc: "103001"
    localized_name {
      name: "name103"
    }
    uuid: "uuid103"
  }
}

# Test[104]: MNOByOperatorNameMultipleNameOptions
mno {
  data {
    mccmnc: "104001"
    localized_name {
      name: "name104001"
    }
    localized_name {
      name: "name104002"
    }
    uuid: "uuid104"
  }
}

# Tets[105]: MNOByOperatorNameWithLang
mno {
  data {
    mccmnc: "105001"
    localized_name {
      name: "name105"
      language: "en"
    }
    uuid: "uuid105"
  }
}

# Test[106]: MNOByMCCMNCAndOperatorName
mno {
  data {
    mccmnc: "106001"
    localized_name {
      name: "name106001"
    }
    uuid: "uuid106001"
  }
}
mno {
  data {
    mccmnc: "106001"
    localized_name {
      name: "name106002"
    }
  uuid: "uuid106002"
  }
}

# Test[107]: MNOByOperatorNameAndMCCMNC
mno {
  data {
    mccmnc: "107001"
    localized_name {
      name: "name107"
    }
    uuid: "uuid107001"
  }
}
mno {
  data {
    mccmnc: "107002"
    localized_name {
      name: "name107"
    }
  uuid: "uuid107002"
  }
}

# Test[108]: MNOByMCCMNCOberridesOperatorName
mno {
  data {
    mccmnc: "108001"
    localized_name {
      name: "name108001"
    }
    uuid: "uuid108001"
  }
}
mno {
  data {
    mccmnc: "108002"
    localized_name {
      name: "name108002"
    }
    uuid: "uuid108002"
  }
}

# Test[109]: MNOByIMSI
mno {
  data {
    mccmnc: "10901"
    localized_name {
      name: "name10901"
    }
    uuid: "uuid10901"
  }
}
mno {
  data {
    mccmnc: "109002"
    localized_name {
      name: "name109002"
    }
    uuid: "uuid109002"
  }
}

# Test[110]: MNOByMCCMNCOverridesIMSI
mno {
  data {
    mccmnc: "110001"
    localized_name {
      name: "name110001"
    }
    uuid: "uuid110001"
  }
}
mno {
  data {
    mccmnc: "110002"
    localized_name {
      name: "name110002"
    }
    uuid: "uuid110002"
  }
}

# Test[111] MNOUnchangedBySecondaryUpdates
mno {
  data {
    mccmnc: "111001"
    localized_name {
      name: "name111001"
    }
    uuid: "uuid111001"
  }
}
mno {
  data {
    mccmnc: "111002"
    sid: "111102"
    nid: "111202"
    uuid: "uuid111002"
  }
}

# Test[112] MVNODefaultMatch
mno {
  data {
    mccmnc: "112001"
    localized_name {
      name: "name112001"
    }
    uuid: "uuid112001"
  }
  mvno {
    data {
      uuid: "uuid112002"
    }
  }
}

# Test[113] MVNONameMatch & MVNOMatchAndMismatch & MVNOMatchAndReset
mno {
  data {
    mccmnc: "113001"
    localized_name {
      name: "name113001"
    }
    uuid: "uuid113001"
  }
  mvno {
    mvno_filter {
      type: OPERATOR_NAME
      regex: "name113002"
    }
    data {
      localized_name {
        name: "name113002"
      }
      uuid: "uuid113002"
    }
  }
}

# Test[114] MVNONameMalformedRegexMatch
mno {
  data {
    mccmnc: "114001"
    localized_name {
      name: "name114001"
    }
    uuid: "uuid114001"
  }
  # All mvnos have malformed filters.
  mvno {
    mvno_filter {
      type: OPERATOR_NAME
      regex: "name["
    }
    data {
      localized_name {
        name: "name114002"
      }
      uuid: "name114002"
    }
  }
}

# Test[115] MVNONameSubexpressionRegexMatch
mno {
  data {
    mccmnc: "115001"
    localized_name {
      name: "name115001"
    }
    uuid: "uuid115001"
  }
  mvno {
    mvno_filter {
      type: OPERATOR_NAME
      regex: "name115"
    }
    data {
      localized_name {
        name: "name115002"
      }
      uuid: "uuid115002"
    }
  }
}

# Test[116] MVNONameSubexpressionRegexMatch
mno {
  data {
    mccmnc: "116001"
    localized_name {
      name: "name116001"
    }
    uuid: "uuid116001"
  }
  mvno {
    mvno_filter {
      type: OPERATOR_NAME
      regex: "name[a-zA-Z]*116[0-9]{0,3}"
    }
    data {
      localized_name {
        name: "name116002"
      }
      uuid: "uuid116002"
    }
  }
}

# Test[117] MVNONameMatchMultipleFilters
mno {
  data {
    mccmnc: "117001"
    localized_name {
      name: "name117001"
    }
    uuid: "uuid117001"
  }
  mvno {
    mvno_filter {
      type: OPERATOR_NAME
      regex: "nameA_[a-zA-Z]*"
    }
    mvno_filter {
      type: OPERATOR_NAME
      regex: "[a-zA-Z]*_nameB"
    }
    data {
      localized_name {
        name: "name117002"
      }
      uuid: "uuid117002"
    }
  }
}

# Test[118] MVNOIMSIMatch
mno {
  data {
    mccmnc: "118001"
    localized_name {
      name: "name118001"
    }
    uuid: "uuid118001"
  }
  mvno {
    mvno_filter {
      type: IMSI
      regex: "1180015432154321"
    }
    data {
      localized_name {
        name: "name118002"
      }
      prioritizes_name: true
      uuid: "uuid118002"
    }
  }
}

# Test[119] MVNOICCIDMatch
mno {
  data {
    mccmnc: "119001"
    localized_name {
      name: "name119001"
    }
    uuid: "uuid119001"
  }
  mvno {
    mvno_filter {
      type: ICCID
      regex: "119123456789"
    }
    data {
      localized_name {
        name: "name119002"
      }
      uuid: "uuid119002"
    }
  }
}

# Test[120] MVNOSIDMatch
mno {
  data {
    sid: "120001"
    sid: "120002"
    localized_name {
      name: "name120001"
    }
    uuid: "uuid120001"
  }
  mvno {
    mvno_filter {
      type: SID
      regex: "120002"
    }
    data {
      localized_name {
        name: "name120002"
      }
      uuid: "uuid120002"
    }
  }
}

# Test[121] MVNOAllMatch
mno {
  data {
    mccmnc: "121001"
    localized_name {
      name: "name121001"
    }
    uuid: "uuid121001"
  }
  mvno {
    mvno_filter {
      type: OPERATOR_NAME
      regex: "name121003"
    }
    data {
      localized_name {
        name: "name121003"
      }
      uuid: "uuid121003"
    }
  }
  mvno {
    mvno_filter {
      type: IMSI
      regex: "1210045432154321"
    }
    data {
      localized_name {
        name: "name121004"
      }
      uuid: "uuid121004"
    }
  }
  mvno {
    mvno_filter {
      type: ICCID
      regex: "121005123456789"
    }
    data {
      localized_name {
        name: "name121005"
      }
      uuid: "uuid121005"
    }
  }
  mvno {
    mvno_filter {
      type: OPERATOR_NAME
      regex: "name121006"
    }
    mvno_filter {
      type: ICCID
      regex: "121006123456789"
    }
    data {
      localized_name {
        name: "name121006"
      }
      uuid: "uuid121006"
    }
  }
}

# Test[122]: MNOBySID
mno {
  data {
    sid: "1221"
    localized_name {
      name: "name1221"
    }
    uuid: "uuid1221"
  }
}

# Test[123] MNOByMCCMNCAndSID
mno {
  data {
    mccmnc: "123001"
    localized_name {
      name: "name123001"
    }
    uuid: "uuid123001"
  }
}
mno {
  data {
    sid: "1232"
    localized_name {
      name: "name1232"
    }
    uuid: "uuid1232"
  }
}

# Test[124] MNOByMCCMNCMultipleMNOOptions
mno {
  data {
    mccmnc: "124001"
    uuid: "uuid124001"
  }
}
mno {
  data {
    mccmnc: "124001"
    uuid: "uuid124002"
  }
  earmarked: true
}

# Test[125] MNOByOperatorNameMultipleMNOOptions
mno {
  data {
    mccmnc: "125001"
    localized_name {
      name: "name125001"
    }
    uuid: "uuid125001"
  }
}
mno {
  data {
    mccmnc: "125002"
    localized_name {
      name: "name125001"
    }
    uuid: "uuid125002"
  }
  earmarked: true
}

# Test[126] MNOByOperatorNameAggressiveMatch
mno {
  data {
    mccmnc: "126001"
    localized_name {
      name: "name126001 CaseDoesNotMatch"
    }
    uuid: "uuid126001"
  }
}
mno {
  data {
    mccmnc: "126002"
    localized_name {
      name: "name126002 casestilldoesnotmatch"
    }
    uuid: "uuid126002"
  }
}
mno {
  data {
    mccmnc: "126003"
    localized_name {
      name: "name126003 Give Me More Space"
    }
    uuid: "uuid126003"
  }
}
mno {
  data {
    mccmnc: "126004"
    localized_name {
      name: "name126004TooMuchAirHere"
    }
    uuid: "uuid126004"
  }
}
mno {
  data {
    mccmnc: "126005"
    localized_name {
      name: "nämé with Non-Äσ¢ii"
    }
    uuid: "uuid126005"
  }
}
mno {
  data {
    mccmnc: "127001"
    localized_name {
      name: "name127001"
    }
    uuid: "uuid127001"
  }
}
mvno {
  mvno_filter {
    type: IMSI
    regex: "1270015432154322"
  }
  data {
    localized_name {
      name: "name127001-mvno"
    }
    uuid: "uuid127001-mvno"
  }
}

# Test[128] MVNOIMSIMatchByRange
mno {
  data {
    mccmnc: "128001"
    localized_name {
      name: "name128001"
    }
    uuid: "uuid128001"
  }
  mvno {
    mvno_filter {
      type: IMSI
      range: {
          start: 128001432154321
          end:   128001432164321
      }
      range: {
          start: 128001437999999
          end:   128001438111111
      }
    }
    data {
      localized_name {
        name: "name128002"
      }
      uuid: "uuid128002"
    }
  }
}
