// Copyright 2019 The Chromium OS Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

//! Generated using ./xlib_generator.sh

#![allow(clippy::upper_case_acronyms)]

#[link(name = "X11")]
extern "C" {}

#[link(name = "Xext")]
extern "C" {}

/* automatically generated by rust-bindgen */

pub const KeyPressMask: u32 = 1;
pub const KeyReleaseMask: u32 = 2;
pub const ButtonPressMask: u32 = 4;
pub const ButtonReleaseMask: u32 = 8;
pub const PointerMotionMask: u32 = 64;
pub const ExposureMask: u32 = 32768;
pub const KeyPress: u32 = 2;
pub const KeyRelease: u32 = 3;
pub const ButtonPress: u32 = 4;
pub const ButtonRelease: u32 = 5;
pub const MotionNotify: u32 = 6;
pub const Expose: u32 = 12;
pub const ClientMessage: u32 = 33;
pub const Button1Mask: u32 = 256;
pub const Button1: u32 = 1;
pub const ZPixmap: u32 = 2;
pub const XK_VoidSymbol: u32 = 16777215;
pub const XK_BackSpace: u32 = 65288;
pub const XK_Tab: u32 = 65289;
pub const XK_Linefeed: u32 = 65290;
pub const XK_Clear: u32 = 65291;
pub const XK_Return: u32 = 65293;
pub const XK_Pause: u32 = 65299;
pub const XK_Scroll_Lock: u32 = 65300;
pub const XK_Sys_Req: u32 = 65301;
pub const XK_Escape: u32 = 65307;
pub const XK_Delete: u32 = 65535;
pub const XK_Multi_key: u32 = 65312;
pub const XK_Codeinput: u32 = 65335;
pub const XK_SingleCandidate: u32 = 65340;
pub const XK_MultipleCandidate: u32 = 65341;
pub const XK_PreviousCandidate: u32 = 65342;
pub const XK_Kanji: u32 = 65313;
pub const XK_Muhenkan: u32 = 65314;
pub const XK_Henkan_Mode: u32 = 65315;
pub const XK_Henkan: u32 = 65315;
pub const XK_Romaji: u32 = 65316;
pub const XK_Hiragana: u32 = 65317;
pub const XK_Katakana: u32 = 65318;
pub const XK_Hiragana_Katakana: u32 = 65319;
pub const XK_Zenkaku: u32 = 65320;
pub const XK_Hankaku: u32 = 65321;
pub const XK_Zenkaku_Hankaku: u32 = 65322;
pub const XK_Touroku: u32 = 65323;
pub const XK_Massyo: u32 = 65324;
pub const XK_Kana_Lock: u32 = 65325;
pub const XK_Kana_Shift: u32 = 65326;
pub const XK_Eisu_Shift: u32 = 65327;
pub const XK_Eisu_toggle: u32 = 65328;
pub const XK_Kanji_Bangou: u32 = 65335;
pub const XK_Zen_Koho: u32 = 65341;
pub const XK_Mae_Koho: u32 = 65342;
pub const XK_Home: u32 = 65360;
pub const XK_Left: u32 = 65361;
pub const XK_Up: u32 = 65362;
pub const XK_Right: u32 = 65363;
pub const XK_Down: u32 = 65364;
pub const XK_Prior: u32 = 65365;
pub const XK_Page_Up: u32 = 65365;
pub const XK_Next: u32 = 65366;
pub const XK_Page_Down: u32 = 65366;
pub const XK_End: u32 = 65367;
pub const XK_Begin: u32 = 65368;
pub const XK_Select: u32 = 65376;
pub const XK_Print: u32 = 65377;
pub const XK_Execute: u32 = 65378;
pub const XK_Insert: u32 = 65379;
pub const XK_Undo: u32 = 65381;
pub const XK_Redo: u32 = 65382;
pub const XK_Menu: u32 = 65383;
pub const XK_Find: u32 = 65384;
pub const XK_Cancel: u32 = 65385;
pub const XK_Help: u32 = 65386;
pub const XK_Break: u32 = 65387;
pub const XK_Mode_switch: u32 = 65406;
pub const XK_script_switch: u32 = 65406;
pub const XK_Num_Lock: u32 = 65407;
pub const XK_KP_Space: u32 = 65408;
pub const XK_KP_Tab: u32 = 65417;
pub const XK_KP_Enter: u32 = 65421;
pub const XK_KP_F1: u32 = 65425;
pub const XK_KP_F2: u32 = 65426;
pub const XK_KP_F3: u32 = 65427;
pub const XK_KP_F4: u32 = 65428;
pub const XK_KP_Home: u32 = 65429;
pub const XK_KP_Left: u32 = 65430;
pub const XK_KP_Up: u32 = 65431;
pub const XK_KP_Right: u32 = 65432;
pub const XK_KP_Down: u32 = 65433;
pub const XK_KP_Prior: u32 = 65434;
pub const XK_KP_Page_Up: u32 = 65434;
pub const XK_KP_Next: u32 = 65435;
pub const XK_KP_Page_Down: u32 = 65435;
pub const XK_KP_End: u32 = 65436;
pub const XK_KP_Begin: u32 = 65437;
pub const XK_KP_Insert: u32 = 65438;
pub const XK_KP_Delete: u32 = 65439;
pub const XK_KP_Equal: u32 = 65469;
pub const XK_KP_Multiply: u32 = 65450;
pub const XK_KP_Add: u32 = 65451;
pub const XK_KP_Separator: u32 = 65452;
pub const XK_KP_Subtract: u32 = 65453;
pub const XK_KP_Decimal: u32 = 65454;
pub const XK_KP_Divide: u32 = 65455;
pub const XK_KP_0: u32 = 65456;
pub const XK_KP_1: u32 = 65457;
pub const XK_KP_2: u32 = 65458;
pub const XK_KP_3: u32 = 65459;
pub const XK_KP_4: u32 = 65460;
pub const XK_KP_5: u32 = 65461;
pub const XK_KP_6: u32 = 65462;
pub const XK_KP_7: u32 = 65463;
pub const XK_KP_8: u32 = 65464;
pub const XK_KP_9: u32 = 65465;
pub const XK_F1: u32 = 65470;
pub const XK_F2: u32 = 65471;
pub const XK_F3: u32 = 65472;
pub const XK_F4: u32 = 65473;
pub const XK_F5: u32 = 65474;
pub const XK_F6: u32 = 65475;
pub const XK_F7: u32 = 65476;
pub const XK_F8: u32 = 65477;
pub const XK_F9: u32 = 65478;
pub const XK_F10: u32 = 65479;
pub const XK_F11: u32 = 65480;
pub const XK_L1: u32 = 65480;
pub const XK_F12: u32 = 65481;
pub const XK_L2: u32 = 65481;
pub const XK_F13: u32 = 65482;
pub const XK_L3: u32 = 65482;
pub const XK_F14: u32 = 65483;
pub const XK_L4: u32 = 65483;
pub const XK_F15: u32 = 65484;
pub const XK_L5: u32 = 65484;
pub const XK_F16: u32 = 65485;
pub const XK_L6: u32 = 65485;
pub const XK_F17: u32 = 65486;
pub const XK_L7: u32 = 65486;
pub const XK_F18: u32 = 65487;
pub const XK_L8: u32 = 65487;
pub const XK_F19: u32 = 65488;
pub const XK_L9: u32 = 65488;
pub const XK_F20: u32 = 65489;
pub const XK_L10: u32 = 65489;
pub const XK_F21: u32 = 65490;
pub const XK_R1: u32 = 65490;
pub const XK_F22: u32 = 65491;
pub const XK_R2: u32 = 65491;
pub const XK_F23: u32 = 65492;
pub const XK_R3: u32 = 65492;
pub const XK_F24: u32 = 65493;
pub const XK_R4: u32 = 65493;
pub const XK_F25: u32 = 65494;
pub const XK_R5: u32 = 65494;
pub const XK_F26: u32 = 65495;
pub const XK_R6: u32 = 65495;
pub const XK_F27: u32 = 65496;
pub const XK_R7: u32 = 65496;
pub const XK_F28: u32 = 65497;
pub const XK_R8: u32 = 65497;
pub const XK_F29: u32 = 65498;
pub const XK_R9: u32 = 65498;
pub const XK_F30: u32 = 65499;
pub const XK_R10: u32 = 65499;
pub const XK_F31: u32 = 65500;
pub const XK_R11: u32 = 65500;
pub const XK_F32: u32 = 65501;
pub const XK_R12: u32 = 65501;
pub const XK_F33: u32 = 65502;
pub const XK_R13: u32 = 65502;
pub const XK_F34: u32 = 65503;
pub const XK_R14: u32 = 65503;
pub const XK_F35: u32 = 65504;
pub const XK_R15: u32 = 65504;
pub const XK_Shift_L: u32 = 65505;
pub const XK_Shift_R: u32 = 65506;
pub const XK_Control_L: u32 = 65507;
pub const XK_Control_R: u32 = 65508;
pub const XK_Caps_Lock: u32 = 65509;
pub const XK_Shift_Lock: u32 = 65510;
pub const XK_Meta_L: u32 = 65511;
pub const XK_Meta_R: u32 = 65512;
pub const XK_Alt_L: u32 = 65513;
pub const XK_Alt_R: u32 = 65514;
pub const XK_Super_L: u32 = 65515;
pub const XK_Super_R: u32 = 65516;
pub const XK_Hyper_L: u32 = 65517;
pub const XK_Hyper_R: u32 = 65518;
pub const XK_ISO_Lock: u32 = 65025;
pub const XK_ISO_Level2_Latch: u32 = 65026;
pub const XK_ISO_Level3_Shift: u32 = 65027;
pub const XK_ISO_Level3_Latch: u32 = 65028;
pub const XK_ISO_Level3_Lock: u32 = 65029;
pub const XK_ISO_Level5_Shift: u32 = 65041;
pub const XK_ISO_Level5_Latch: u32 = 65042;
pub const XK_ISO_Level5_Lock: u32 = 65043;
pub const XK_ISO_Group_Shift: u32 = 65406;
pub const XK_ISO_Group_Latch: u32 = 65030;
pub const XK_ISO_Group_Lock: u32 = 65031;
pub const XK_ISO_Next_Group: u32 = 65032;
pub const XK_ISO_Next_Group_Lock: u32 = 65033;
pub const XK_ISO_Prev_Group: u32 = 65034;
pub const XK_ISO_Prev_Group_Lock: u32 = 65035;
pub const XK_ISO_First_Group: u32 = 65036;
pub const XK_ISO_First_Group_Lock: u32 = 65037;
pub const XK_ISO_Last_Group: u32 = 65038;
pub const XK_ISO_Last_Group_Lock: u32 = 65039;
pub const XK_ISO_Left_Tab: u32 = 65056;
pub const XK_ISO_Move_Line_Up: u32 = 65057;
pub const XK_ISO_Move_Line_Down: u32 = 65058;
pub const XK_ISO_Partial_Line_Up: u32 = 65059;
pub const XK_ISO_Partial_Line_Down: u32 = 65060;
pub const XK_ISO_Partial_Space_Left: u32 = 65061;
pub const XK_ISO_Partial_Space_Right: u32 = 65062;
pub const XK_ISO_Set_Margin_Left: u32 = 65063;
pub const XK_ISO_Set_Margin_Right: u32 = 65064;
pub const XK_ISO_Release_Margin_Left: u32 = 65065;
pub const XK_ISO_Release_Margin_Right: u32 = 65066;
pub const XK_ISO_Release_Both_Margins: u32 = 65067;
pub const XK_ISO_Fast_Cursor_Left: u32 = 65068;
pub const XK_ISO_Fast_Cursor_Right: u32 = 65069;
pub const XK_ISO_Fast_Cursor_Up: u32 = 65070;
pub const XK_ISO_Fast_Cursor_Down: u32 = 65071;
pub const XK_ISO_Continuous_Underline: u32 = 65072;
pub const XK_ISO_Discontinuous_Underline: u32 = 65073;
pub const XK_ISO_Emphasize: u32 = 65074;
pub const XK_ISO_Center_Object: u32 = 65075;
pub const XK_ISO_Enter: u32 = 65076;
pub const XK_dead_grave: u32 = 65104;
pub const XK_dead_acute: u32 = 65105;
pub const XK_dead_circumflex: u32 = 65106;
pub const XK_dead_tilde: u32 = 65107;
pub const XK_dead_perispomeni: u32 = 65107;
pub const XK_dead_macron: u32 = 65108;
pub const XK_dead_breve: u32 = 65109;
pub const XK_dead_abovedot: u32 = 65110;
pub const XK_dead_diaeresis: u32 = 65111;
pub const XK_dead_abovering: u32 = 65112;
pub const XK_dead_doubleacute: u32 = 65113;
pub const XK_dead_caron: u32 = 65114;
pub const XK_dead_cedilla: u32 = 65115;
pub const XK_dead_ogonek: u32 = 65116;
pub const XK_dead_iota: u32 = 65117;
pub const XK_dead_voiced_sound: u32 = 65118;
pub const XK_dead_semivoiced_sound: u32 = 65119;
pub const XK_dead_belowdot: u32 = 65120;
pub const XK_dead_hook: u32 = 65121;
pub const XK_dead_horn: u32 = 65122;
pub const XK_dead_stroke: u32 = 65123;
pub const XK_dead_abovecomma: u32 = 65124;
pub const XK_dead_psili: u32 = 65124;
pub const XK_dead_abovereversedcomma: u32 = 65125;
pub const XK_dead_dasia: u32 = 65125;
pub const XK_dead_doublegrave: u32 = 65126;
pub const XK_dead_belowring: u32 = 65127;
pub const XK_dead_belowmacron: u32 = 65128;
pub const XK_dead_belowcircumflex: u32 = 65129;
pub const XK_dead_belowtilde: u32 = 65130;
pub const XK_dead_belowbreve: u32 = 65131;
pub const XK_dead_belowdiaeresis: u32 = 65132;
pub const XK_dead_invertedbreve: u32 = 65133;
pub const XK_dead_belowcomma: u32 = 65134;
pub const XK_dead_currency: u32 = 65135;
pub const XK_dead_lowline: u32 = 65168;
pub const XK_dead_aboveverticalline: u32 = 65169;
pub const XK_dead_belowverticalline: u32 = 65170;
pub const XK_dead_longsolidusoverlay: u32 = 65171;
pub const XK_dead_a: u32 = 65152;
pub const XK_dead_A: u32 = 65153;
pub const XK_dead_e: u32 = 65154;
pub const XK_dead_E: u32 = 65155;
pub const XK_dead_i: u32 = 65156;
pub const XK_dead_I: u32 = 65157;
pub const XK_dead_o: u32 = 65158;
pub const XK_dead_O: u32 = 65159;
pub const XK_dead_u: u32 = 65160;
pub const XK_dead_U: u32 = 65161;
pub const XK_dead_small_schwa: u32 = 65162;
pub const XK_dead_capital_schwa: u32 = 65163;
pub const XK_dead_greek: u32 = 65164;
pub const XK_First_Virtual_Screen: u32 = 65232;
pub const XK_Prev_Virtual_Screen: u32 = 65233;
pub const XK_Next_Virtual_Screen: u32 = 65234;
pub const XK_Last_Virtual_Screen: u32 = 65236;
pub const XK_Terminate_Server: u32 = 65237;
pub const XK_AccessX_Enable: u32 = 65136;
pub const XK_AccessX_Feedback_Enable: u32 = 65137;
pub const XK_RepeatKeys_Enable: u32 = 65138;
pub const XK_SlowKeys_Enable: u32 = 65139;
pub const XK_BounceKeys_Enable: u32 = 65140;
pub const XK_StickyKeys_Enable: u32 = 65141;
pub const XK_MouseKeys_Enable: u32 = 65142;
pub const XK_MouseKeys_Accel_Enable: u32 = 65143;
pub const XK_Overlay1_Enable: u32 = 65144;
pub const XK_Overlay2_Enable: u32 = 65145;
pub const XK_AudibleBell_Enable: u32 = 65146;
pub const XK_Pointer_Left: u32 = 65248;
pub const XK_Pointer_Right: u32 = 65249;
pub const XK_Pointer_Up: u32 = 65250;
pub const XK_Pointer_Down: u32 = 65251;
pub const XK_Pointer_UpLeft: u32 = 65252;
pub const XK_Pointer_UpRight: u32 = 65253;
pub const XK_Pointer_DownLeft: u32 = 65254;
pub const XK_Pointer_DownRight: u32 = 65255;
pub const XK_Pointer_Button_Dflt: u32 = 65256;
pub const XK_Pointer_Button1: u32 = 65257;
pub const XK_Pointer_Button2: u32 = 65258;
pub const XK_Pointer_Button3: u32 = 65259;
pub const XK_Pointer_Button4: u32 = 65260;
pub const XK_Pointer_Button5: u32 = 65261;
pub const XK_Pointer_DblClick_Dflt: u32 = 65262;
pub const XK_Pointer_DblClick1: u32 = 65263;
pub const XK_Pointer_DblClick2: u32 = 65264;
pub const XK_Pointer_DblClick3: u32 = 65265;
pub const XK_Pointer_DblClick4: u32 = 65266;
pub const XK_Pointer_DblClick5: u32 = 65267;
pub const XK_Pointer_Drag_Dflt: u32 = 65268;
pub const XK_Pointer_Drag1: u32 = 65269;
pub const XK_Pointer_Drag2: u32 = 65270;
pub const XK_Pointer_Drag3: u32 = 65271;
pub const XK_Pointer_Drag4: u32 = 65272;
pub const XK_Pointer_Drag5: u32 = 65277;
pub const XK_Pointer_EnableKeys: u32 = 65273;
pub const XK_Pointer_Accelerate: u32 = 65274;
pub const XK_Pointer_DfltBtnNext: u32 = 65275;
pub const XK_Pointer_DfltBtnPrev: u32 = 65276;
pub const XK_ch: u32 = 65184;
pub const XK_Ch: u32 = 65185;
pub const XK_CH: u32 = 65186;
pub const XK_c_h: u32 = 65187;
pub const XK_C_h: u32 = 65188;
pub const XK_C_H: u32 = 65189;
pub const XK_space: u32 = 32;
pub const XK_exclam: u32 = 33;
pub const XK_quotedbl: u32 = 34;
pub const XK_numbersign: u32 = 35;
pub const XK_dollar: u32 = 36;
pub const XK_percent: u32 = 37;
pub const XK_ampersand: u32 = 38;
pub const XK_apostrophe: u32 = 39;
pub const XK_quoteright: u32 = 39;
pub const XK_parenleft: u32 = 40;
pub const XK_parenright: u32 = 41;
pub const XK_asterisk: u32 = 42;
pub const XK_plus: u32 = 43;
pub const XK_comma: u32 = 44;
pub const XK_minus: u32 = 45;
pub const XK_period: u32 = 46;
pub const XK_slash: u32 = 47;
pub const XK_0: u32 = 48;
pub const XK_1: u32 = 49;
pub const XK_2: u32 = 50;
pub const XK_3: u32 = 51;
pub const XK_4: u32 = 52;
pub const XK_5: u32 = 53;
pub const XK_6: u32 = 54;
pub const XK_7: u32 = 55;
pub const XK_8: u32 = 56;
pub const XK_9: u32 = 57;
pub const XK_colon: u32 = 58;
pub const XK_semicolon: u32 = 59;
pub const XK_less: u32 = 60;
pub const XK_equal: u32 = 61;
pub const XK_greater: u32 = 62;
pub const XK_question: u32 = 63;
pub const XK_at: u32 = 64;
pub const XK_A: u32 = 65;
pub const XK_B: u32 = 66;
pub const XK_C: u32 = 67;
pub const XK_D: u32 = 68;
pub const XK_E: u32 = 69;
pub const XK_F: u32 = 70;
pub const XK_G: u32 = 71;
pub const XK_H: u32 = 72;
pub const XK_I: u32 = 73;
pub const XK_J: u32 = 74;
pub const XK_K: u32 = 75;
pub const XK_L: u32 = 76;
pub const XK_M: u32 = 77;
pub const XK_N: u32 = 78;
pub const XK_O: u32 = 79;
pub const XK_P: u32 = 80;
pub const XK_Q: u32 = 81;
pub const XK_R: u32 = 82;
pub const XK_S: u32 = 83;
pub const XK_T: u32 = 84;
pub const XK_U: u32 = 85;
pub const XK_V: u32 = 86;
pub const XK_W: u32 = 87;
pub const XK_X: u32 = 88;
pub const XK_Y: u32 = 89;
pub const XK_Z: u32 = 90;
pub const XK_bracketleft: u32 = 91;
pub const XK_backslash: u32 = 92;
pub const XK_bracketright: u32 = 93;
pub const XK_asciicircum: u32 = 94;
pub const XK_underscore: u32 = 95;
pub const XK_grave: u32 = 96;
pub const XK_quoteleft: u32 = 96;
pub const XK_a: u32 = 97;
pub const XK_b: u32 = 98;
pub const XK_c: u32 = 99;
pub const XK_d: u32 = 100;
pub const XK_e: u32 = 101;
pub const XK_f: u32 = 102;
pub const XK_g: u32 = 103;
pub const XK_h: u32 = 104;
pub const XK_i: u32 = 105;
pub const XK_j: u32 = 106;
pub const XK_k: u32 = 107;
pub const XK_l: u32 = 108;
pub const XK_m: u32 = 109;
pub const XK_n: u32 = 110;
pub const XK_o: u32 = 111;
pub const XK_p: u32 = 112;
pub const XK_q: u32 = 113;
pub const XK_r: u32 = 114;
pub const XK_s: u32 = 115;
pub const XK_t: u32 = 116;
pub const XK_u: u32 = 117;
pub const XK_v: u32 = 118;
pub const XK_w: u32 = 119;
pub const XK_x: u32 = 120;
pub const XK_y: u32 = 121;
pub const XK_z: u32 = 122;
pub const XK_braceleft: u32 = 123;
pub const XK_bar: u32 = 124;
pub const XK_braceright: u32 = 125;
pub const XK_asciitilde: u32 = 126;
pub const XK_nobreakspace: u32 = 160;
pub const XK_exclamdown: u32 = 161;
pub const XK_cent: u32 = 162;
pub const XK_sterling: u32 = 163;
pub const XK_currency: u32 = 164;
pub const XK_yen: u32 = 165;
pub const XK_brokenbar: u32 = 166;
pub const XK_section: u32 = 167;
pub const XK_diaeresis: u32 = 168;
pub const XK_copyright: u32 = 169;
pub const XK_ordfeminine: u32 = 170;
pub const XK_guillemotleft: u32 = 171;
pub const XK_notsign: u32 = 172;
pub const XK_hyphen: u32 = 173;
pub const XK_registered: u32 = 174;
pub const XK_macron: u32 = 175;
pub const XK_degree: u32 = 176;
pub const XK_plusminus: u32 = 177;
pub const XK_twosuperior: u32 = 178;
pub const XK_threesuperior: u32 = 179;
pub const XK_acute: u32 = 180;
pub const XK_mu: u32 = 181;
pub const XK_paragraph: u32 = 182;
pub const XK_periodcentered: u32 = 183;
pub const XK_cedilla: u32 = 184;
pub const XK_onesuperior: u32 = 185;
pub const XK_masculine: u32 = 186;
pub const XK_guillemotright: u32 = 187;
pub const XK_onequarter: u32 = 188;
pub const XK_onehalf: u32 = 189;
pub const XK_threequarters: u32 = 190;
pub const XK_questiondown: u32 = 191;
pub const XK_Agrave: u32 = 192;
pub const XK_Aacute: u32 = 193;
pub const XK_Acircumflex: u32 = 194;
pub const XK_Atilde: u32 = 195;
pub const XK_Adiaeresis: u32 = 196;
pub const XK_Aring: u32 = 197;
pub const XK_AE: u32 = 198;
pub const XK_Ccedilla: u32 = 199;
pub const XK_Egrave: u32 = 200;
pub const XK_Eacute: u32 = 201;
pub const XK_Ecircumflex: u32 = 202;
pub const XK_Ediaeresis: u32 = 203;
pub const XK_Igrave: u32 = 204;
pub const XK_Iacute: u32 = 205;
pub const XK_Icircumflex: u32 = 206;
pub const XK_Idiaeresis: u32 = 207;
pub const XK_ETH: u32 = 208;
pub const XK_Eth: u32 = 208;
pub const XK_Ntilde: u32 = 209;
pub const XK_Ograve: u32 = 210;
pub const XK_Oacute: u32 = 211;
pub const XK_Ocircumflex: u32 = 212;
pub const XK_Otilde: u32 = 213;
pub const XK_Odiaeresis: u32 = 214;
pub const XK_multiply: u32 = 215;
pub const XK_Oslash: u32 = 216;
pub const XK_Ooblique: u32 = 216;
pub const XK_Ugrave: u32 = 217;
pub const XK_Uacute: u32 = 218;
pub const XK_Ucircumflex: u32 = 219;
pub const XK_Udiaeresis: u32 = 220;
pub const XK_Yacute: u32 = 221;
pub const XK_THORN: u32 = 222;
pub const XK_Thorn: u32 = 222;
pub const XK_ssharp: u32 = 223;
pub const XK_agrave: u32 = 224;
pub const XK_aacute: u32 = 225;
pub const XK_acircumflex: u32 = 226;
pub const XK_atilde: u32 = 227;
pub const XK_adiaeresis: u32 = 228;
pub const XK_aring: u32 = 229;
pub const XK_ae: u32 = 230;
pub const XK_ccedilla: u32 = 231;
pub const XK_egrave: u32 = 232;
pub const XK_eacute: u32 = 233;
pub const XK_ecircumflex: u32 = 234;
pub const XK_ediaeresis: u32 = 235;
pub const XK_igrave: u32 = 236;
pub const XK_iacute: u32 = 237;
pub const XK_icircumflex: u32 = 238;
pub const XK_idiaeresis: u32 = 239;
pub const XK_eth: u32 = 240;
pub const XK_ntilde: u32 = 241;
pub const XK_ograve: u32 = 242;
pub const XK_oacute: u32 = 243;
pub const XK_ocircumflex: u32 = 244;
pub const XK_otilde: u32 = 245;
pub const XK_odiaeresis: u32 = 246;
pub const XK_division: u32 = 247;
pub const XK_oslash: u32 = 248;
pub const XK_ooblique: u32 = 248;
pub const XK_ugrave: u32 = 249;
pub const XK_uacute: u32 = 250;
pub const XK_ucircumflex: u32 = 251;
pub const XK_udiaeresis: u32 = 252;
pub const XK_yacute: u32 = 253;
pub const XK_thorn: u32 = 254;
pub const XK_ydiaeresis: u32 = 255;
pub const XK_Aogonek: u32 = 417;
pub const XK_breve: u32 = 418;
pub const XK_Lstroke: u32 = 419;
pub const XK_Lcaron: u32 = 421;
pub const XK_Sacute: u32 = 422;
pub const XK_Scaron: u32 = 425;
pub const XK_Scedilla: u32 = 426;
pub const XK_Tcaron: u32 = 427;
pub const XK_Zacute: u32 = 428;
pub const XK_Zcaron: u32 = 430;
pub const XK_Zabovedot: u32 = 431;
pub const XK_aogonek: u32 = 433;
pub const XK_ogonek: u32 = 434;
pub const XK_lstroke: u32 = 435;
pub const XK_lcaron: u32 = 437;
pub const XK_sacute: u32 = 438;
pub const XK_caron: u32 = 439;
pub const XK_scaron: u32 = 441;
pub const XK_scedilla: u32 = 442;
pub const XK_tcaron: u32 = 443;
pub const XK_zacute: u32 = 444;
pub const XK_doubleacute: u32 = 445;
pub const XK_zcaron: u32 = 446;
pub const XK_zabovedot: u32 = 447;
pub const XK_Racute: u32 = 448;
pub const XK_Abreve: u32 = 451;
pub const XK_Lacute: u32 = 453;
pub const XK_Cacute: u32 = 454;
pub const XK_Ccaron: u32 = 456;
pub const XK_Eogonek: u32 = 458;
pub const XK_Ecaron: u32 = 460;
pub const XK_Dcaron: u32 = 463;
pub const XK_Dstroke: u32 = 464;
pub const XK_Nacute: u32 = 465;
pub const XK_Ncaron: u32 = 466;
pub const XK_Odoubleacute: u32 = 469;
pub const XK_Rcaron: u32 = 472;
pub const XK_Uring: u32 = 473;
pub const XK_Udoubleacute: u32 = 475;
pub const XK_Tcedilla: u32 = 478;
pub const XK_racute: u32 = 480;
pub const XK_abreve: u32 = 483;
pub const XK_lacute: u32 = 485;
pub const XK_cacute: u32 = 486;
pub const XK_ccaron: u32 = 488;
pub const XK_eogonek: u32 = 490;
pub const XK_ecaron: u32 = 492;
pub const XK_dcaron: u32 = 495;
pub const XK_dstroke: u32 = 496;
pub const XK_nacute: u32 = 497;
pub const XK_ncaron: u32 = 498;
pub const XK_odoubleacute: u32 = 501;
pub const XK_rcaron: u32 = 504;
pub const XK_uring: u32 = 505;
pub const XK_udoubleacute: u32 = 507;
pub const XK_tcedilla: u32 = 510;
pub const XK_abovedot: u32 = 511;
pub const XK_Hstroke: u32 = 673;
pub const XK_Hcircumflex: u32 = 678;
pub const XK_Iabovedot: u32 = 681;
pub const XK_Gbreve: u32 = 683;
pub const XK_Jcircumflex: u32 = 684;
pub const XK_hstroke: u32 = 689;
pub const XK_hcircumflex: u32 = 694;
pub const XK_idotless: u32 = 697;
pub const XK_gbreve: u32 = 699;
pub const XK_jcircumflex: u32 = 700;
pub const XK_Cabovedot: u32 = 709;
pub const XK_Ccircumflex: u32 = 710;
pub const XK_Gabovedot: u32 = 725;
pub const XK_Gcircumflex: u32 = 728;
pub const XK_Ubreve: u32 = 733;
pub const XK_Scircumflex: u32 = 734;
pub const XK_cabovedot: u32 = 741;
pub const XK_ccircumflex: u32 = 742;
pub const XK_gabovedot: u32 = 757;
pub const XK_gcircumflex: u32 = 760;
pub const XK_ubreve: u32 = 765;
pub const XK_scircumflex: u32 = 766;
pub const XK_kra: u32 = 930;
pub const XK_kappa: u32 = 930;
pub const XK_Rcedilla: u32 = 931;
pub const XK_Itilde: u32 = 933;
pub const XK_Lcedilla: u32 = 934;
pub const XK_Emacron: u32 = 938;
pub const XK_Gcedilla: u32 = 939;
pub const XK_Tslash: u32 = 940;
pub const XK_rcedilla: u32 = 947;
pub const XK_itilde: u32 = 949;
pub const XK_lcedilla: u32 = 950;
pub const XK_emacron: u32 = 954;
pub const XK_gcedilla: u32 = 955;
pub const XK_tslash: u32 = 956;
pub const XK_ENG: u32 = 957;
pub const XK_eng: u32 = 959;
pub const XK_Amacron: u32 = 960;
pub const XK_Iogonek: u32 = 967;
pub const XK_Eabovedot: u32 = 972;
pub const XK_Imacron: u32 = 975;
pub const XK_Ncedilla: u32 = 977;
pub const XK_Omacron: u32 = 978;
pub const XK_Kcedilla: u32 = 979;
pub const XK_Uogonek: u32 = 985;
pub const XK_Utilde: u32 = 989;
pub const XK_Umacron: u32 = 990;
pub const XK_amacron: u32 = 992;
pub const XK_iogonek: u32 = 999;
pub const XK_eabovedot: u32 = 1004;
pub const XK_imacron: u32 = 1007;
pub const XK_ncedilla: u32 = 1009;
pub const XK_omacron: u32 = 1010;
pub const XK_kcedilla: u32 = 1011;
pub const XK_uogonek: u32 = 1017;
pub const XK_utilde: u32 = 1021;
pub const XK_umacron: u32 = 1022;
pub const XK_Wcircumflex: u32 = 16777588;
pub const XK_wcircumflex: u32 = 16777589;
pub const XK_Ycircumflex: u32 = 16777590;
pub const XK_ycircumflex: u32 = 16777591;
pub const XK_Babovedot: u32 = 16784898;
pub const XK_babovedot: u32 = 16784899;
pub const XK_Dabovedot: u32 = 16784906;
pub const XK_dabovedot: u32 = 16784907;
pub const XK_Fabovedot: u32 = 16784926;
pub const XK_fabovedot: u32 = 16784927;
pub const XK_Mabovedot: u32 = 16784960;
pub const XK_mabovedot: u32 = 16784961;
pub const XK_Pabovedot: u32 = 16784982;
pub const XK_pabovedot: u32 = 16784983;
pub const XK_Sabovedot: u32 = 16784992;
pub const XK_sabovedot: u32 = 16784993;
pub const XK_Tabovedot: u32 = 16785002;
pub const XK_tabovedot: u32 = 16785003;
pub const XK_Wgrave: u32 = 16785024;
pub const XK_wgrave: u32 = 16785025;
pub const XK_Wacute: u32 = 16785026;
pub const XK_wacute: u32 = 16785027;
pub const XK_Wdiaeresis: u32 = 16785028;
pub const XK_wdiaeresis: u32 = 16785029;
pub const XK_Ygrave: u32 = 16785138;
pub const XK_ygrave: u32 = 16785139;
pub const XK_OE: u32 = 5052;
pub const XK_oe: u32 = 5053;
pub const XK_Ydiaeresis: u32 = 5054;
pub const XK_overline: u32 = 1150;
pub const XK_kana_fullstop: u32 = 1185;
pub const XK_kana_openingbracket: u32 = 1186;
pub const XK_kana_closingbracket: u32 = 1187;
pub const XK_kana_comma: u32 = 1188;
pub const XK_kana_conjunctive: u32 = 1189;
pub const XK_kana_middledot: u32 = 1189;
pub const XK_kana_WO: u32 = 1190;
pub const XK_kana_a: u32 = 1191;
pub const XK_kana_i: u32 = 1192;
pub const XK_kana_u: u32 = 1193;
pub const XK_kana_e: u32 = 1194;
pub const XK_kana_o: u32 = 1195;
pub const XK_kana_ya: u32 = 1196;
pub const XK_kana_yu: u32 = 1197;
pub const XK_kana_yo: u32 = 1198;
pub const XK_kana_tsu: u32 = 1199;
pub const XK_kana_tu: u32 = 1199;
pub const XK_prolongedsound: u32 = 1200;
pub const XK_kana_A: u32 = 1201;
pub const XK_kana_I: u32 = 1202;
pub const XK_kana_U: u32 = 1203;
pub const XK_kana_E: u32 = 1204;
pub const XK_kana_O: u32 = 1205;
pub const XK_kana_KA: u32 = 1206;
pub const XK_kana_KI: u32 = 1207;
pub const XK_kana_KU: u32 = 1208;
pub const XK_kana_KE: u32 = 1209;
pub const XK_kana_KO: u32 = 1210;
pub const XK_kana_SA: u32 = 1211;
pub const XK_kana_SHI: u32 = 1212;
pub const XK_kana_SU: u32 = 1213;
pub const XK_kana_SE: u32 = 1214;
pub const XK_kana_SO: u32 = 1215;
pub const XK_kana_TA: u32 = 1216;
pub const XK_kana_CHI: u32 = 1217;
pub const XK_kana_TI: u32 = 1217;
pub const XK_kana_TSU: u32 = 1218;
pub const XK_kana_TU: u32 = 1218;
pub const XK_kana_TE: u32 = 1219;
pub const XK_kana_TO: u32 = 1220;
pub const XK_kana_NA: u32 = 1221;
pub const XK_kana_NI: u32 = 1222;
pub const XK_kana_NU: u32 = 1223;
pub const XK_kana_NE: u32 = 1224;
pub const XK_kana_NO: u32 = 1225;
pub const XK_kana_HA: u32 = 1226;
pub const XK_kana_HI: u32 = 1227;
pub const XK_kana_FU: u32 = 1228;
pub const XK_kana_HU: u32 = 1228;
pub const XK_kana_HE: u32 = 1229;
pub const XK_kana_HO: u32 = 1230;
pub const XK_kana_MA: u32 = 1231;
pub const XK_kana_MI: u32 = 1232;
pub const XK_kana_MU: u32 = 1233;
pub const XK_kana_ME: u32 = 1234;
pub const XK_kana_MO: u32 = 1235;
pub const XK_kana_YA: u32 = 1236;
pub const XK_kana_YU: u32 = 1237;
pub const XK_kana_YO: u32 = 1238;
pub const XK_kana_RA: u32 = 1239;
pub const XK_kana_RI: u32 = 1240;
pub const XK_kana_RU: u32 = 1241;
pub const XK_kana_RE: u32 = 1242;
pub const XK_kana_RO: u32 = 1243;
pub const XK_kana_WA: u32 = 1244;
pub const XK_kana_N: u32 = 1245;
pub const XK_voicedsound: u32 = 1246;
pub const XK_semivoicedsound: u32 = 1247;
pub const XK_kana_switch: u32 = 65406;
pub const XK_Farsi_0: u32 = 16778992;
pub const XK_Farsi_1: u32 = 16778993;
pub const XK_Farsi_2: u32 = 16778994;
pub const XK_Farsi_3: u32 = 16778995;
pub const XK_Farsi_4: u32 = 16778996;
pub const XK_Farsi_5: u32 = 16778997;
pub const XK_Farsi_6: u32 = 16778998;
pub const XK_Farsi_7: u32 = 16778999;
pub const XK_Farsi_8: u32 = 16779000;
pub const XK_Farsi_9: u32 = 16779001;
pub const XK_Arabic_percent: u32 = 16778858;
pub const XK_Arabic_superscript_alef: u32 = 16778864;
pub const XK_Arabic_tteh: u32 = 16778873;
pub const XK_Arabic_peh: u32 = 16778878;
pub const XK_Arabic_tcheh: u32 = 16778886;
pub const XK_Arabic_ddal: u32 = 16778888;
pub const XK_Arabic_rreh: u32 = 16778897;
pub const XK_Arabic_comma: u32 = 1452;
pub const XK_Arabic_fullstop: u32 = 16778964;
pub const XK_Arabic_0: u32 = 16778848;
pub const XK_Arabic_1: u32 = 16778849;
pub const XK_Arabic_2: u32 = 16778850;
pub const XK_Arabic_3: u32 = 16778851;
pub const XK_Arabic_4: u32 = 16778852;
pub const XK_Arabic_5: u32 = 16778853;
pub const XK_Arabic_6: u32 = 16778854;
pub const XK_Arabic_7: u32 = 16778855;
pub const XK_Arabic_8: u32 = 16778856;
pub const XK_Arabic_9: u32 = 16778857;
pub const XK_Arabic_semicolon: u32 = 1467;
pub const XK_Arabic_question_mark: u32 = 1471;
pub const XK_Arabic_hamza: u32 = 1473;
pub const XK_Arabic_maddaonalef: u32 = 1474;
pub const XK_Arabic_hamzaonalef: u32 = 1475;
pub const XK_Arabic_hamzaonwaw: u32 = 1476;
pub const XK_Arabic_hamzaunderalef: u32 = 1477;
pub const XK_Arabic_hamzaonyeh: u32 = 1478;
pub const XK_Arabic_alef: u32 = 1479;
pub const XK_Arabic_beh: u32 = 1480;
pub const XK_Arabic_tehmarbuta: u32 = 1481;
pub const XK_Arabic_teh: u32 = 1482;
pub const XK_Arabic_theh: u32 = 1483;
pub const XK_Arabic_jeem: u32 = 1484;
pub const XK_Arabic_hah: u32 = 1485;
pub const XK_Arabic_khah: u32 = 1486;
pub const XK_Arabic_dal: u32 = 1487;
pub const XK_Arabic_thal: u32 = 1488;
pub const XK_Arabic_ra: u32 = 1489;
pub const XK_Arabic_zain: u32 = 1490;
pub const XK_Arabic_seen: u32 = 1491;
pub const XK_Arabic_sheen: u32 = 1492;
pub const XK_Arabic_sad: u32 = 1493;
pub const XK_Arabic_dad: u32 = 1494;
pub const XK_Arabic_tah: u32 = 1495;
pub const XK_Arabic_zah: u32 = 1496;
pub const XK_Arabic_ain: u32 = 1497;
pub const XK_Arabic_ghain: u32 = 1498;
pub const XK_Arabic_tatweel: u32 = 1504;
pub const XK_Arabic_feh: u32 = 1505;
pub const XK_Arabic_qaf: u32 = 1506;
pub const XK_Arabic_kaf: u32 = 1507;
pub const XK_Arabic_lam: u32 = 1508;
pub const XK_Arabic_meem: u32 = 1509;
pub const XK_Arabic_noon: u32 = 1510;
pub const XK_Arabic_ha: u32 = 1511;
pub const XK_Arabic_heh: u32 = 1511;
pub const XK_Arabic_waw: u32 = 1512;
pub const XK_Arabic_alefmaksura: u32 = 1513;
pub const XK_Arabic_yeh: u32 = 1514;
pub const XK_Arabic_fathatan: u32 = 1515;
pub const XK_Arabic_dammatan: u32 = 1516;
pub const XK_Arabic_kasratan: u32 = 1517;
pub const XK_Arabic_fatha: u32 = 1518;
pub const XK_Arabic_damma: u32 = 1519;
pub const XK_Arabic_kasra: u32 = 1520;
pub const XK_Arabic_shadda: u32 = 1521;
pub const XK_Arabic_sukun: u32 = 1522;
pub const XK_Arabic_madda_above: u32 = 16778835;
pub const XK_Arabic_hamza_above: u32 = 16778836;
pub const XK_Arabic_hamza_below: u32 = 16778837;
pub const XK_Arabic_jeh: u32 = 16778904;
pub const XK_Arabic_veh: u32 = 16778916;
pub const XK_Arabic_keheh: u32 = 16778921;
pub const XK_Arabic_gaf: u32 = 16778927;
pub const XK_Arabic_noon_ghunna: u32 = 16778938;
pub const XK_Arabic_heh_doachashmee: u32 = 16778942;
pub const XK_Farsi_yeh: u32 = 16778956;
pub const XK_Arabic_farsi_yeh: u32 = 16778956;
pub const XK_Arabic_yeh_baree: u32 = 16778962;
pub const XK_Arabic_heh_goal: u32 = 16778945;
pub const XK_Arabic_switch: u32 = 65406;
pub const XK_Cyrillic_GHE_bar: u32 = 16778386;
pub const XK_Cyrillic_ghe_bar: u32 = 16778387;
pub const XK_Cyrillic_ZHE_descender: u32 = 16778390;
pub const XK_Cyrillic_zhe_descender: u32 = 16778391;
pub const XK_Cyrillic_KA_descender: u32 = 16778394;
pub const XK_Cyrillic_ka_descender: u32 = 16778395;
pub const XK_Cyrillic_KA_vertstroke: u32 = 16778396;
pub const XK_Cyrillic_ka_vertstroke: u32 = 16778397;
pub const XK_Cyrillic_EN_descender: u32 = 16778402;
pub const XK_Cyrillic_en_descender: u32 = 16778403;
pub const XK_Cyrillic_U_straight: u32 = 16778414;
pub const XK_Cyrillic_u_straight: u32 = 16778415;
pub const XK_Cyrillic_U_straight_bar: u32 = 16778416;
pub const XK_Cyrillic_u_straight_bar: u32 = 16778417;
pub const XK_Cyrillic_HA_descender: u32 = 16778418;
pub const XK_Cyrillic_ha_descender: u32 = 16778419;
pub const XK_Cyrillic_CHE_descender: u32 = 16778422;
pub const XK_Cyrillic_che_descender: u32 = 16778423;
pub const XK_Cyrillic_CHE_vertstroke: u32 = 16778424;
pub const XK_Cyrillic_che_vertstroke: u32 = 16778425;
pub const XK_Cyrillic_SHHA: u32 = 16778426;
pub const XK_Cyrillic_shha: u32 = 16778427;
pub const XK_Cyrillic_SCHWA: u32 = 16778456;
pub const XK_Cyrillic_schwa: u32 = 16778457;
pub const XK_Cyrillic_I_macron: u32 = 16778466;
pub const XK_Cyrillic_i_macron: u32 = 16778467;
pub const XK_Cyrillic_O_bar: u32 = 16778472;
pub const XK_Cyrillic_o_bar: u32 = 16778473;
pub const XK_Cyrillic_U_macron: u32 = 16778478;
pub const XK_Cyrillic_u_macron: u32 = 16778479;
pub const XK_Serbian_dje: u32 = 1697;
pub const XK_Macedonia_gje: u32 = 1698;
pub const XK_Cyrillic_io: u32 = 1699;
pub const XK_Ukrainian_ie: u32 = 1700;
pub const XK_Ukranian_je: u32 = 1700;
pub const XK_Macedonia_dse: u32 = 1701;
pub const XK_Ukrainian_i: u32 = 1702;
pub const XK_Ukranian_i: u32 = 1702;
pub const XK_Ukrainian_yi: u32 = 1703;
pub const XK_Ukranian_yi: u32 = 1703;
pub const XK_Cyrillic_je: u32 = 1704;
pub const XK_Serbian_je: u32 = 1704;
pub const XK_Cyrillic_lje: u32 = 1705;
pub const XK_Serbian_lje: u32 = 1705;
pub const XK_Cyrillic_nje: u32 = 1706;
pub const XK_Serbian_nje: u32 = 1706;
pub const XK_Serbian_tshe: u32 = 1707;
pub const XK_Macedonia_kje: u32 = 1708;
pub const XK_Ukrainian_ghe_with_upturn: u32 = 1709;
pub const XK_Byelorussian_shortu: u32 = 1710;
pub const XK_Cyrillic_dzhe: u32 = 1711;
pub const XK_Serbian_dze: u32 = 1711;
pub const XK_numerosign: u32 = 1712;
pub const XK_Serbian_DJE: u32 = 1713;
pub const XK_Macedonia_GJE: u32 = 1714;
pub const XK_Cyrillic_IO: u32 = 1715;
pub const XK_Ukrainian_IE: u32 = 1716;
pub const XK_Ukranian_JE: u32 = 1716;
pub const XK_Macedonia_DSE: u32 = 1717;
pub const XK_Ukrainian_I: u32 = 1718;
pub const XK_Ukranian_I: u32 = 1718;
pub const XK_Ukrainian_YI: u32 = 1719;
pub const XK_Ukranian_YI: u32 = 1719;
pub const XK_Cyrillic_JE: u32 = 1720;
pub const XK_Serbian_JE: u32 = 1720;
pub const XK_Cyrillic_LJE: u32 = 1721;
pub const XK_Serbian_LJE: u32 = 1721;
pub const XK_Cyrillic_NJE: u32 = 1722;
pub const XK_Serbian_NJE: u32 = 1722;
pub const XK_Serbian_TSHE: u32 = 1723;
pub const XK_Macedonia_KJE: u32 = 1724;
pub const XK_Ukrainian_GHE_WITH_UPTURN: u32 = 1725;
pub const XK_Byelorussian_SHORTU: u32 = 1726;
pub const XK_Cyrillic_DZHE: u32 = 1727;
pub const XK_Serbian_DZE: u32 = 1727;
pub const XK_Cyrillic_yu: u32 = 1728;
pub const XK_Cyrillic_a: u32 = 1729;
pub const XK_Cyrillic_be: u32 = 1730;
pub const XK_Cyrillic_tse: u32 = 1731;
pub const XK_Cyrillic_de: u32 = 1732;
pub const XK_Cyrillic_ie: u32 = 1733;
pub const XK_Cyrillic_ef: u32 = 1734;
pub const XK_Cyrillic_ghe: u32 = 1735;
pub const XK_Cyrillic_ha: u32 = 1736;
pub const XK_Cyrillic_i: u32 = 1737;
pub const XK_Cyrillic_shorti: u32 = 1738;
pub const XK_Cyrillic_ka: u32 = 1739;
pub const XK_Cyrillic_el: u32 = 1740;
pub const XK_Cyrillic_em: u32 = 1741;
pub const XK_Cyrillic_en: u32 = 1742;
pub const XK_Cyrillic_o: u32 = 1743;
pub const XK_Cyrillic_pe: u32 = 1744;
pub const XK_Cyrillic_ya: u32 = 1745;
pub const XK_Cyrillic_er: u32 = 1746;
pub const XK_Cyrillic_es: u32 = 1747;
pub const XK_Cyrillic_te: u32 = 1748;
pub const XK_Cyrillic_u: u32 = 1749;
pub const XK_Cyrillic_zhe: u32 = 1750;
pub const XK_Cyrillic_ve: u32 = 1751;
pub const XK_Cyrillic_softsign: u32 = 1752;
pub const XK_Cyrillic_yeru: u32 = 1753;
pub const XK_Cyrillic_ze: u32 = 1754;
pub const XK_Cyrillic_sha: u32 = 1755;
pub const XK_Cyrillic_e: u32 = 1756;
pub const XK_Cyrillic_shcha: u32 = 1757;
pub const XK_Cyrillic_che: u32 = 1758;
pub const XK_Cyrillic_hardsign: u32 = 1759;
pub const XK_Cyrillic_YU: u32 = 1760;
pub const XK_Cyrillic_A: u32 = 1761;
pub const XK_Cyrillic_BE: u32 = 1762;
pub const XK_Cyrillic_TSE: u32 = 1763;
pub const XK_Cyrillic_DE: u32 = 1764;
pub const XK_Cyrillic_IE: u32 = 1765;
pub const XK_Cyrillic_EF: u32 = 1766;
pub const XK_Cyrillic_GHE: u32 = 1767;
pub const XK_Cyrillic_HA: u32 = 1768;
pub const XK_Cyrillic_I: u32 = 1769;
pub const XK_Cyrillic_SHORTI: u32 = 1770;
pub const XK_Cyrillic_KA: u32 = 1771;
pub const XK_Cyrillic_EL: u32 = 1772;
pub const XK_Cyrillic_EM: u32 = 1773;
pub const XK_Cyrillic_EN: u32 = 1774;
pub const XK_Cyrillic_O: u32 = 1775;
pub const XK_Cyrillic_PE: u32 = 1776;
pub const XK_Cyrillic_YA: u32 = 1777;
pub const XK_Cyrillic_ER: u32 = 1778;
pub const XK_Cyrillic_ES: u32 = 1779;
pub const XK_Cyrillic_TE: u32 = 1780;
pub const XK_Cyrillic_U: u32 = 1781;
pub const XK_Cyrillic_ZHE: u32 = 1782;
pub const XK_Cyrillic_VE: u32 = 1783;
pub const XK_Cyrillic_SOFTSIGN: u32 = 1784;
pub const XK_Cyrillic_YERU: u32 = 1785;
pub const XK_Cyrillic_ZE: u32 = 1786;
pub const XK_Cyrillic_SHA: u32 = 1787;
pub const XK_Cyrillic_E: u32 = 1788;
pub const XK_Cyrillic_SHCHA: u32 = 1789;
pub const XK_Cyrillic_CHE: u32 = 1790;
pub const XK_Cyrillic_HARDSIGN: u32 = 1791;
pub const XK_Greek_ALPHAaccent: u32 = 1953;
pub const XK_Greek_EPSILONaccent: u32 = 1954;
pub const XK_Greek_ETAaccent: u32 = 1955;
pub const XK_Greek_IOTAaccent: u32 = 1956;
pub const XK_Greek_IOTAdieresis: u32 = 1957;
pub const XK_Greek_IOTAdiaeresis: u32 = 1957;
pub const XK_Greek_OMICRONaccent: u32 = 1959;
pub const XK_Greek_UPSILONaccent: u32 = 1960;
pub const XK_Greek_UPSILONdieresis: u32 = 1961;
pub const XK_Greek_OMEGAaccent: u32 = 1963;
pub const XK_Greek_accentdieresis: u32 = 1966;
pub const XK_Greek_horizbar: u32 = 1967;
pub const XK_Greek_alphaaccent: u32 = 1969;
pub const XK_Greek_epsilonaccent: u32 = 1970;
pub const XK_Greek_etaaccent: u32 = 1971;
pub const XK_Greek_iotaaccent: u32 = 1972;
pub const XK_Greek_iotadieresis: u32 = 1973;
pub const XK_Greek_iotaaccentdieresis: u32 = 1974;
pub const XK_Greek_omicronaccent: u32 = 1975;
pub const XK_Greek_upsilonaccent: u32 = 1976;
pub const XK_Greek_upsilondieresis: u32 = 1977;
pub const XK_Greek_upsilonaccentdieresis: u32 = 1978;
pub const XK_Greek_omegaaccent: u32 = 1979;
pub const XK_Greek_ALPHA: u32 = 1985;
pub const XK_Greek_BETA: u32 = 1986;
pub const XK_Greek_GAMMA: u32 = 1987;
pub const XK_Greek_DELTA: u32 = 1988;
pub const XK_Greek_EPSILON: u32 = 1989;
pub const XK_Greek_ZETA: u32 = 1990;
pub const XK_Greek_ETA: u32 = 1991;
pub const XK_Greek_THETA: u32 = 1992;
pub const XK_Greek_IOTA: u32 = 1993;
pub const XK_Greek_KAPPA: u32 = 1994;
pub const XK_Greek_LAMDA: u32 = 1995;
pub const XK_Greek_LAMBDA: u32 = 1995;
pub const XK_Greek_MU: u32 = 1996;
pub const XK_Greek_NU: u32 = 1997;
pub const XK_Greek_XI: u32 = 1998;
pub const XK_Greek_OMICRON: u32 = 1999;
pub const XK_Greek_PI: u32 = 2000;
pub const XK_Greek_RHO: u32 = 2001;
pub const XK_Greek_SIGMA: u32 = 2002;
pub const XK_Greek_TAU: u32 = 2004;
pub const XK_Greek_UPSILON: u32 = 2005;
pub const XK_Greek_PHI: u32 = 2006;
pub const XK_Greek_CHI: u32 = 2007;
pub const XK_Greek_PSI: u32 = 2008;
pub const XK_Greek_OMEGA: u32 = 2009;
pub const XK_Greek_alpha: u32 = 2017;
pub const XK_Greek_beta: u32 = 2018;
pub const XK_Greek_gamma: u32 = 2019;
pub const XK_Greek_delta: u32 = 2020;
pub const XK_Greek_epsilon: u32 = 2021;
pub const XK_Greek_zeta: u32 = 2022;
pub const XK_Greek_eta: u32 = 2023;
pub const XK_Greek_theta: u32 = 2024;
pub const XK_Greek_iota: u32 = 2025;
pub const XK_Greek_kappa: u32 = 2026;
pub const XK_Greek_lamda: u32 = 2027;
pub const XK_Greek_lambda: u32 = 2027;
pub const XK_Greek_mu: u32 = 2028;
pub const XK_Greek_nu: u32 = 2029;
pub const XK_Greek_xi: u32 = 2030;
pub const XK_Greek_omicron: u32 = 2031;
pub const XK_Greek_pi: u32 = 2032;
pub const XK_Greek_rho: u32 = 2033;
pub const XK_Greek_sigma: u32 = 2034;
pub const XK_Greek_finalsmallsigma: u32 = 2035;
pub const XK_Greek_tau: u32 = 2036;
pub const XK_Greek_upsilon: u32 = 2037;
pub const XK_Greek_phi: u32 = 2038;
pub const XK_Greek_chi: u32 = 2039;
pub const XK_Greek_psi: u32 = 2040;
pub const XK_Greek_omega: u32 = 2041;
pub const XK_Greek_switch: u32 = 65406;
pub const XK_hebrew_doublelowline: u32 = 3295;
pub const XK_hebrew_aleph: u32 = 3296;
pub const XK_hebrew_bet: u32 = 3297;
pub const XK_hebrew_beth: u32 = 3297;
pub const XK_hebrew_gimel: u32 = 3298;
pub const XK_hebrew_gimmel: u32 = 3298;
pub const XK_hebrew_dalet: u32 = 3299;
pub const XK_hebrew_daleth: u32 = 3299;
pub const XK_hebrew_he: u32 = 3300;
pub const XK_hebrew_waw: u32 = 3301;
pub const XK_hebrew_zain: u32 = 3302;
pub const XK_hebrew_zayin: u32 = 3302;
pub const XK_hebrew_chet: u32 = 3303;
pub const XK_hebrew_het: u32 = 3303;
pub const XK_hebrew_tet: u32 = 3304;
pub const XK_hebrew_teth: u32 = 3304;
pub const XK_hebrew_yod: u32 = 3305;
pub const XK_hebrew_finalkaph: u32 = 3306;
pub const XK_hebrew_kaph: u32 = 3307;
pub const XK_hebrew_lamed: u32 = 3308;
pub const XK_hebrew_finalmem: u32 = 3309;
pub const XK_hebrew_mem: u32 = 3310;
pub const XK_hebrew_finalnun: u32 = 3311;
pub const XK_hebrew_nun: u32 = 3312;
pub const XK_hebrew_samech: u32 = 3313;
pub const XK_hebrew_samekh: u32 = 3313;
pub const XK_hebrew_ayin: u32 = 3314;
pub const XK_hebrew_finalpe: u32 = 3315;
pub const XK_hebrew_pe: u32 = 3316;
pub const XK_hebrew_finalzade: u32 = 3317;
pub const XK_hebrew_finalzadi: u32 = 3317;
pub const XK_hebrew_zade: u32 = 3318;
pub const XK_hebrew_zadi: u32 = 3318;
pub const XK_hebrew_qoph: u32 = 3319;
pub const XK_hebrew_kuf: u32 = 3319;
pub const XK_hebrew_resh: u32 = 3320;
pub const XK_hebrew_shin: u32 = 3321;
pub const XK_hebrew_taw: u32 = 3322;
pub const XK_hebrew_taf: u32 = 3322;
pub const XK_Hebrew_switch: u32 = 65406;
pub const XK_Thai_kokai: u32 = 3489;
pub const XK_Thai_khokhai: u32 = 3490;
pub const XK_Thai_khokhuat: u32 = 3491;
pub const XK_Thai_khokhwai: u32 = 3492;
pub const XK_Thai_khokhon: u32 = 3493;
pub const XK_Thai_khorakhang: u32 = 3494;
pub const XK_Thai_ngongu: u32 = 3495;
pub const XK_Thai_chochan: u32 = 3496;
pub const XK_Thai_choching: u32 = 3497;
pub const XK_Thai_chochang: u32 = 3498;
pub const XK_Thai_soso: u32 = 3499;
pub const XK_Thai_chochoe: u32 = 3500;
pub const XK_Thai_yoying: u32 = 3501;
pub const XK_Thai_dochada: u32 = 3502;
pub const XK_Thai_topatak: u32 = 3503;
pub const XK_Thai_thothan: u32 = 3504;
pub const XK_Thai_thonangmontho: u32 = 3505;
pub const XK_Thai_thophuthao: u32 = 3506;
pub const XK_Thai_nonen: u32 = 3507;
pub const XK_Thai_dodek: u32 = 3508;
pub const XK_Thai_totao: u32 = 3509;
pub const XK_Thai_thothung: u32 = 3510;
pub const XK_Thai_thothahan: u32 = 3511;
pub const XK_Thai_thothong: u32 = 3512;
pub const XK_Thai_nonu: u32 = 3513;
pub const XK_Thai_bobaimai: u32 = 3514;
pub const XK_Thai_popla: u32 = 3515;
pub const XK_Thai_phophung: u32 = 3516;
pub const XK_Thai_fofa: u32 = 3517;
pub const XK_Thai_phophan: u32 = 3518;
pub const XK_Thai_fofan: u32 = 3519;
pub const XK_Thai_phosamphao: u32 = 3520;
pub const XK_Thai_moma: u32 = 3521;
pub const XK_Thai_yoyak: u32 = 3522;
pub const XK_Thai_rorua: u32 = 3523;
pub const XK_Thai_ru: u32 = 3524;
pub const XK_Thai_loling: u32 = 3525;
pub const XK_Thai_lu: u32 = 3526;
pub const XK_Thai_wowaen: u32 = 3527;
pub const XK_Thai_sosala: u32 = 3528;
pub const XK_Thai_sorusi: u32 = 3529;
pub const XK_Thai_sosua: u32 = 3530;
pub const XK_Thai_hohip: u32 = 3531;
pub const XK_Thai_lochula: u32 = 3532;
pub const XK_Thai_oang: u32 = 3533;
pub const XK_Thai_honokhuk: u32 = 3534;
pub const XK_Thai_paiyannoi: u32 = 3535;
pub const XK_Thai_saraa: u32 = 3536;
pub const XK_Thai_maihanakat: u32 = 3537;
pub const XK_Thai_saraaa: u32 = 3538;
pub const XK_Thai_saraam: u32 = 3539;
pub const XK_Thai_sarai: u32 = 3540;
pub const XK_Thai_saraii: u32 = 3541;
pub const XK_Thai_saraue: u32 = 3542;
pub const XK_Thai_sarauee: u32 = 3543;
pub const XK_Thai_sarau: u32 = 3544;
pub const XK_Thai_sarauu: u32 = 3545;
pub const XK_Thai_phinthu: u32 = 3546;
pub const XK_Thai_maihanakat_maitho: u32 = 3550;
pub const XK_Thai_baht: u32 = 3551;
pub const XK_Thai_sarae: u32 = 3552;
pub const XK_Thai_saraae: u32 = 3553;
pub const XK_Thai_sarao: u32 = 3554;
pub const XK_Thai_saraaimaimuan: u32 = 3555;
pub const XK_Thai_saraaimaimalai: u32 = 3556;
pub const XK_Thai_lakkhangyao: u32 = 3557;
pub const XK_Thai_maiyamok: u32 = 3558;
pub const XK_Thai_maitaikhu: u32 = 3559;
pub const XK_Thai_maiek: u32 = 3560;
pub const XK_Thai_maitho: u32 = 3561;
pub const XK_Thai_maitri: u32 = 3562;
pub const XK_Thai_maichattawa: u32 = 3563;
pub const XK_Thai_thanthakhat: u32 = 3564;
pub const XK_Thai_nikhahit: u32 = 3565;
pub const XK_Thai_leksun: u32 = 3568;
pub const XK_Thai_leknung: u32 = 3569;
pub const XK_Thai_leksong: u32 = 3570;
pub const XK_Thai_leksam: u32 = 3571;
pub const XK_Thai_leksi: u32 = 3572;
pub const XK_Thai_lekha: u32 = 3573;
pub const XK_Thai_lekhok: u32 = 3574;
pub const XK_Thai_lekchet: u32 = 3575;
pub const XK_Thai_lekpaet: u32 = 3576;
pub const XK_Thai_lekkao: u32 = 3577;
pub const XK_Hangul: u32 = 65329;
pub const XK_Hangul_Start: u32 = 65330;
pub const XK_Hangul_End: u32 = 65331;
pub const XK_Hangul_Hanja: u32 = 65332;
pub const XK_Hangul_Jamo: u32 = 65333;
pub const XK_Hangul_Romaja: u32 = 65334;
pub const XK_Hangul_Codeinput: u32 = 65335;
pub const XK_Hangul_Jeonja: u32 = 65336;
pub const XK_Hangul_Banja: u32 = 65337;
pub const XK_Hangul_PreHanja: u32 = 65338;
pub const XK_Hangul_PostHanja: u32 = 65339;
pub const XK_Hangul_SingleCandidate: u32 = 65340;
pub const XK_Hangul_MultipleCandidate: u32 = 65341;
pub const XK_Hangul_PreviousCandidate: u32 = 65342;
pub const XK_Hangul_Special: u32 = 65343;
pub const XK_Hangul_switch: u32 = 65406;
pub const XK_Hangul_Kiyeog: u32 = 3745;
pub const XK_Hangul_SsangKiyeog: u32 = 3746;
pub const XK_Hangul_KiyeogSios: u32 = 3747;
pub const XK_Hangul_Nieun: u32 = 3748;
pub const XK_Hangul_NieunJieuj: u32 = 3749;
pub const XK_Hangul_NieunHieuh: u32 = 3750;
pub const XK_Hangul_Dikeud: u32 = 3751;
pub const XK_Hangul_SsangDikeud: u32 = 3752;
pub const XK_Hangul_Rieul: u32 = 3753;
pub const XK_Hangul_RieulKiyeog: u32 = 3754;
pub const XK_Hangul_RieulMieum: u32 = 3755;
pub const XK_Hangul_RieulPieub: u32 = 3756;
pub const XK_Hangul_RieulSios: u32 = 3757;
pub const XK_Hangul_RieulTieut: u32 = 3758;
pub const XK_Hangul_RieulPhieuf: u32 = 3759;
pub const XK_Hangul_RieulHieuh: u32 = 3760;
pub const XK_Hangul_Mieum: u32 = 3761;
pub const XK_Hangul_Pieub: u32 = 3762;
pub const XK_Hangul_SsangPieub: u32 = 3763;
pub const XK_Hangul_PieubSios: u32 = 3764;
pub const XK_Hangul_Sios: u32 = 3765;
pub const XK_Hangul_SsangSios: u32 = 3766;
pub const XK_Hangul_Ieung: u32 = 3767;
pub const XK_Hangul_Jieuj: u32 = 3768;
pub const XK_Hangul_SsangJieuj: u32 = 3769;
pub const XK_Hangul_Cieuc: u32 = 3770;
pub const XK_Hangul_Khieuq: u32 = 3771;
pub const XK_Hangul_Tieut: u32 = 3772;
pub const XK_Hangul_Phieuf: u32 = 3773;
pub const XK_Hangul_Hieuh: u32 = 3774;
pub const XK_Hangul_A: u32 = 3775;
pub const XK_Hangul_AE: u32 = 3776;
pub const XK_Hangul_YA: u32 = 3777;
pub const XK_Hangul_YAE: u32 = 3778;
pub const XK_Hangul_EO: u32 = 3779;
pub const XK_Hangul_E: u32 = 3780;
pub const XK_Hangul_YEO: u32 = 3781;
pub const XK_Hangul_YE: u32 = 3782;
pub const XK_Hangul_O: u32 = 3783;
pub const XK_Hangul_WA: u32 = 3784;
pub const XK_Hangul_WAE: u32 = 3785;
pub const XK_Hangul_OE: u32 = 3786;
pub const XK_Hangul_YO: u32 = 3787;
pub const XK_Hangul_U: u32 = 3788;
pub const XK_Hangul_WEO: u32 = 3789;
pub const XK_Hangul_WE: u32 = 3790;
pub const XK_Hangul_WI: u32 = 3791;
pub const XK_Hangul_YU: u32 = 3792;
pub const XK_Hangul_EU: u32 = 3793;
pub const XK_Hangul_YI: u32 = 3794;
pub const XK_Hangul_I: u32 = 3795;
pub const XK_Hangul_J_Kiyeog: u32 = 3796;
pub const XK_Hangul_J_SsangKiyeog: u32 = 3797;
pub const XK_Hangul_J_KiyeogSios: u32 = 3798;
pub const XK_Hangul_J_Nieun: u32 = 3799;
pub const XK_Hangul_J_NieunJieuj: u32 = 3800;
pub const XK_Hangul_J_NieunHieuh: u32 = 3801;
pub const XK_Hangul_J_Dikeud: u32 = 3802;
pub const XK_Hangul_J_Rieul: u32 = 3803;
pub const XK_Hangul_J_RieulKiyeog: u32 = 3804;
pub const XK_Hangul_J_RieulMieum: u32 = 3805;
pub const XK_Hangul_J_RieulPieub: u32 = 3806;
pub const XK_Hangul_J_RieulSios: u32 = 3807;
pub const XK_Hangul_J_RieulTieut: u32 = 3808;
pub const XK_Hangul_J_RieulPhieuf: u32 = 3809;
pub const XK_Hangul_J_RieulHieuh: u32 = 3810;
pub const XK_Hangul_J_Mieum: u32 = 3811;
pub const XK_Hangul_J_Pieub: u32 = 3812;
pub const XK_Hangul_J_PieubSios: u32 = 3813;
pub const XK_Hangul_J_Sios: u32 = 3814;
pub const XK_Hangul_J_SsangSios: u32 = 3815;
pub const XK_Hangul_J_Ieung: u32 = 3816;
pub const XK_Hangul_J_Jieuj: u32 = 3817;
pub const XK_Hangul_J_Cieuc: u32 = 3818;
pub const XK_Hangul_J_Khieuq: u32 = 3819;
pub const XK_Hangul_J_Tieut: u32 = 3820;
pub const XK_Hangul_J_Phieuf: u32 = 3821;
pub const XK_Hangul_J_Hieuh: u32 = 3822;
pub const XK_Hangul_RieulYeorinHieuh: u32 = 3823;
pub const XK_Hangul_SunkyeongeumMieum: u32 = 3824;
pub const XK_Hangul_SunkyeongeumPieub: u32 = 3825;
pub const XK_Hangul_PanSios: u32 = 3826;
pub const XK_Hangul_KkogjiDalrinIeung: u32 = 3827;
pub const XK_Hangul_SunkyeongeumPhieuf: u32 = 3828;
pub const XK_Hangul_YeorinHieuh: u32 = 3829;
pub const XK_Hangul_AraeA: u32 = 3830;
pub const XK_Hangul_AraeAE: u32 = 3831;
pub const XK_Hangul_J_PanSios: u32 = 3832;
pub const XK_Hangul_J_KkogjiDalrinIeung: u32 = 3833;
pub const XK_Hangul_J_YeorinHieuh: u32 = 3834;
pub const XK_Korean_Won: u32 = 3839;
pub const XK_Armenian_ligature_ew: u32 = 16778631;
pub const XK_Armenian_full_stop: u32 = 16778633;
pub const XK_Armenian_verjaket: u32 = 16778633;
pub const XK_Armenian_separation_mark: u32 = 16778589;
pub const XK_Armenian_but: u32 = 16778589;
pub const XK_Armenian_hyphen: u32 = 16778634;
pub const XK_Armenian_yentamna: u32 = 16778634;
pub const XK_Armenian_exclam: u32 = 16778588;
pub const XK_Armenian_amanak: u32 = 16778588;
pub const XK_Armenian_accent: u32 = 16778587;
pub const XK_Armenian_shesht: u32 = 16778587;
pub const XK_Armenian_question: u32 = 16778590;
pub const XK_Armenian_paruyk: u32 = 16778590;
pub const XK_Armenian_AYB: u32 = 16778545;
pub const XK_Armenian_ayb: u32 = 16778593;
pub const XK_Armenian_BEN: u32 = 16778546;
pub const XK_Armenian_ben: u32 = 16778594;
pub const XK_Armenian_GIM: u32 = 16778547;
pub const XK_Armenian_gim: u32 = 16778595;
pub const XK_Armenian_DA: u32 = 16778548;
pub const XK_Armenian_da: u32 = 16778596;
pub const XK_Armenian_YECH: u32 = 16778549;
pub const XK_Armenian_yech: u32 = 16778597;
pub const XK_Armenian_ZA: u32 = 16778550;
pub const XK_Armenian_za: u32 = 16778598;
pub const XK_Armenian_E: u32 = 16778551;
pub const XK_Armenian_e: u32 = 16778599;
pub const XK_Armenian_AT: u32 = 16778552;
pub const XK_Armenian_at: u32 = 16778600;
pub const XK_Armenian_TO: u32 = 16778553;
pub const XK_Armenian_to: u32 = 16778601;
pub const XK_Armenian_ZHE: u32 = 16778554;
pub const XK_Armenian_zhe: u32 = 16778602;
pub const XK_Armenian_INI: u32 = 16778555;
pub const XK_Armenian_ini: u32 = 16778603;
pub const XK_Armenian_LYUN: u32 = 16778556;
pub const XK_Armenian_lyun: u32 = 16778604;
pub const XK_Armenian_KHE: u32 = 16778557;
pub const XK_Armenian_khe: u32 = 16778605;
pub const XK_Armenian_TSA: u32 = 16778558;
pub const XK_Armenian_tsa: u32 = 16778606;
pub const XK_Armenian_KEN: u32 = 16778559;
pub const XK_Armenian_ken: u32 = 16778607;
pub const XK_Armenian_HO: u32 = 16778560;
pub const XK_Armenian_ho: u32 = 16778608;
pub const XK_Armenian_DZA: u32 = 16778561;
pub const XK_Armenian_dza: u32 = 16778609;
pub const XK_Armenian_GHAT: u32 = 16778562;
pub const XK_Armenian_ghat: u32 = 16778610;
pub const XK_Armenian_TCHE: u32 = 16778563;
pub const XK_Armenian_tche: u32 = 16778611;
pub const XK_Armenian_MEN: u32 = 16778564;
pub const XK_Armenian_men: u32 = 16778612;
pub const XK_Armenian_HI: u32 = 16778565;
pub const XK_Armenian_hi: u32 = 16778613;
pub const XK_Armenian_NU: u32 = 16778566;
pub const XK_Armenian_nu: u32 = 16778614;
pub const XK_Armenian_SHA: u32 = 16778567;
pub const XK_Armenian_sha: u32 = 16778615;
pub const XK_Armenian_VO: u32 = 16778568;
pub const XK_Armenian_vo: u32 = 16778616;
pub const XK_Armenian_CHA: u32 = 16778569;
pub const XK_Armenian_cha: u32 = 16778617;
pub const XK_Armenian_PE: u32 = 16778570;
pub const XK_Armenian_pe: u32 = 16778618;
pub const XK_Armenian_JE: u32 = 16778571;
pub const XK_Armenian_je: u32 = 16778619;
pub const XK_Armenian_RA: u32 = 16778572;
pub const XK_Armenian_ra: u32 = 16778620;
pub const XK_Armenian_SE: u32 = 16778573;
pub const XK_Armenian_se: u32 = 16778621;
pub const XK_Armenian_VEV: u32 = 16778574;
pub const XK_Armenian_vev: u32 = 16778622;
pub const XK_Armenian_TYUN: u32 = 16778575;
pub const XK_Armenian_tyun: u32 = 16778623;
pub const XK_Armenian_RE: u32 = 16778576;
pub const XK_Armenian_re: u32 = 16778624;
pub const XK_Armenian_TSO: u32 = 16778577;
pub const XK_Armenian_tso: u32 = 16778625;
pub const XK_Armenian_VYUN: u32 = 16778578;
pub const XK_Armenian_vyun: u32 = 16778626;
pub const XK_Armenian_PYUR: u32 = 16778579;
pub const XK_Armenian_pyur: u32 = 16778627;
pub const XK_Armenian_KE: u32 = 16778580;
pub const XK_Armenian_ke: u32 = 16778628;
pub const XK_Armenian_O: u32 = 16778581;
pub const XK_Armenian_o: u32 = 16778629;
pub const XK_Armenian_FE: u32 = 16778582;
pub const XK_Armenian_fe: u32 = 16778630;
pub const XK_Armenian_apostrophe: u32 = 16778586;
pub const XK_Georgian_an: u32 = 16781520;
pub const XK_Georgian_ban: u32 = 16781521;
pub const XK_Georgian_gan: u32 = 16781522;
pub const XK_Georgian_don: u32 = 16781523;
pub const XK_Georgian_en: u32 = 16781524;
pub const XK_Georgian_vin: u32 = 16781525;
pub const XK_Georgian_zen: u32 = 16781526;
pub const XK_Georgian_tan: u32 = 16781527;
pub const XK_Georgian_in: u32 = 16781528;
pub const XK_Georgian_kan: u32 = 16781529;
pub const XK_Georgian_las: u32 = 16781530;
pub const XK_Georgian_man: u32 = 16781531;
pub const XK_Georgian_nar: u32 = 16781532;
pub const XK_Georgian_on: u32 = 16781533;
pub const XK_Georgian_par: u32 = 16781534;
pub const XK_Georgian_zhar: u32 = 16781535;
pub const XK_Georgian_rae: u32 = 16781536;
pub const XK_Georgian_san: u32 = 16781537;
pub const XK_Georgian_tar: u32 = 16781538;
pub const XK_Georgian_un: u32 = 16781539;
pub const XK_Georgian_phar: u32 = 16781540;
pub const XK_Georgian_khar: u32 = 16781541;
pub const XK_Georgian_ghan: u32 = 16781542;
pub const XK_Georgian_qar: u32 = 16781543;
pub const XK_Georgian_shin: u32 = 16781544;
pub const XK_Georgian_chin: u32 = 16781545;
pub const XK_Georgian_can: u32 = 16781546;
pub const XK_Georgian_jil: u32 = 16781547;
pub const XK_Georgian_cil: u32 = 16781548;
pub const XK_Georgian_char: u32 = 16781549;
pub const XK_Georgian_xan: u32 = 16781550;
pub const XK_Georgian_jhan: u32 = 16781551;
pub const XK_Georgian_hae: u32 = 16781552;
pub const XK_Georgian_he: u32 = 16781553;
pub const XK_Georgian_hie: u32 = 16781554;
pub const XK_Georgian_we: u32 = 16781555;
pub const XK_Georgian_har: u32 = 16781556;
pub const XK_Georgian_hoe: u32 = 16781557;
pub const XK_Georgian_fi: u32 = 16781558;
pub const XK_Xabovedot: u32 = 16785034;
pub const XK_Ibreve: u32 = 16777516;
pub const XK_Zstroke: u32 = 16777653;
pub const XK_Gcaron: u32 = 16777702;
pub const XK_Ocaron: u32 = 16777681;
pub const XK_Obarred: u32 = 16777631;
pub const XK_xabovedot: u32 = 16785035;
pub const XK_ibreve: u32 = 16777517;
pub const XK_zstroke: u32 = 16777654;
pub const XK_gcaron: u32 = 16777703;
pub const XK_ocaron: u32 = 16777682;
pub const XK_obarred: u32 = 16777845;
pub const XK_SCHWA: u32 = 16777615;
pub const XK_schwa: u32 = 16777817;
pub const XK_EZH: u32 = 16777655;
pub const XK_ezh: u32 = 16777874;
pub const XK_Lbelowdot: u32 = 16784950;
pub const XK_lbelowdot: u32 = 16784951;
pub const XK_Abelowdot: u32 = 16785056;
pub const XK_abelowdot: u32 = 16785057;
pub const XK_Ahook: u32 = 16785058;
pub const XK_ahook: u32 = 16785059;
pub const XK_Acircumflexacute: u32 = 16785060;
pub const XK_acircumflexacute: u32 = 16785061;
pub const XK_Acircumflexgrave: u32 = 16785062;
pub const XK_acircumflexgrave: u32 = 16785063;
pub const XK_Acircumflexhook: u32 = 16785064;
pub const XK_acircumflexhook: u32 = 16785065;
pub const XK_Acircumflextilde: u32 = 16785066;
pub const XK_acircumflextilde: u32 = 16785067;
pub const XK_Acircumflexbelowdot: u32 = 16785068;
pub const XK_acircumflexbelowdot: u32 = 16785069;
pub const XK_Abreveacute: u32 = 16785070;
pub const XK_abreveacute: u32 = 16785071;
pub const XK_Abrevegrave: u32 = 16785072;
pub const XK_abrevegrave: u32 = 16785073;
pub const XK_Abrevehook: u32 = 16785074;
pub const XK_abrevehook: u32 = 16785075;
pub const XK_Abrevetilde: u32 = 16785076;
pub const XK_abrevetilde: u32 = 16785077;
pub const XK_Abrevebelowdot: u32 = 16785078;
pub const XK_abrevebelowdot: u32 = 16785079;
pub const XK_Ebelowdot: u32 = 16785080;
pub const XK_ebelowdot: u32 = 16785081;
pub const XK_Ehook: u32 = 16785082;
pub const XK_ehook: u32 = 16785083;
pub const XK_Etilde: u32 = 16785084;
pub const XK_etilde: u32 = 16785085;
pub const XK_Ecircumflexacute: u32 = 16785086;
pub const XK_ecircumflexacute: u32 = 16785087;
pub const XK_Ecircumflexgrave: u32 = 16785088;
pub const XK_ecircumflexgrave: u32 = 16785089;
pub const XK_Ecircumflexhook: u32 = 16785090;
pub const XK_ecircumflexhook: u32 = 16785091;
pub const XK_Ecircumflextilde: u32 = 16785092;
pub const XK_ecircumflextilde: u32 = 16785093;
pub const XK_Ecircumflexbelowdot: u32 = 16785094;
pub const XK_ecircumflexbelowdot: u32 = 16785095;
pub const XK_Ihook: u32 = 16785096;
pub const XK_ihook: u32 = 16785097;
pub const XK_Ibelowdot: u32 = 16785098;
pub const XK_ibelowdot: u32 = 16785099;
pub const XK_Obelowdot: u32 = 16785100;
pub const XK_obelowdot: u32 = 16785101;
pub const XK_Ohook: u32 = 16785102;
pub const XK_ohook: u32 = 16785103;
pub const XK_Ocircumflexacute: u32 = 16785104;
pub const XK_ocircumflexacute: u32 = 16785105;
pub const XK_Ocircumflexgrave: u32 = 16785106;
pub const XK_ocircumflexgrave: u32 = 16785107;
pub const XK_Ocircumflexhook: u32 = 16785108;
pub const XK_ocircumflexhook: u32 = 16785109;
pub const XK_Ocircumflextilde: u32 = 16785110;
pub const XK_ocircumflextilde: u32 = 16785111;
pub const XK_Ocircumflexbelowdot: u32 = 16785112;
pub const XK_ocircumflexbelowdot: u32 = 16785113;
pub const XK_Ohornacute: u32 = 16785114;
pub const XK_ohornacute: u32 = 16785115;
pub const XK_Ohorngrave: u32 = 16785116;
pub const XK_ohorngrave: u32 = 16785117;
pub const XK_Ohornhook: u32 = 16785118;
pub const XK_ohornhook: u32 = 16785119;
pub const XK_Ohorntilde: u32 = 16785120;
pub const XK_ohorntilde: u32 = 16785121;
pub const XK_Ohornbelowdot: u32 = 16785122;
pub const XK_ohornbelowdot: u32 = 16785123;
pub const XK_Ubelowdot: u32 = 16785124;
pub const XK_ubelowdot: u32 = 16785125;
pub const XK_Uhook: u32 = 16785126;
pub const XK_uhook: u32 = 16785127;
pub const XK_Uhornacute: u32 = 16785128;
pub const XK_uhornacute: u32 = 16785129;
pub const XK_Uhorngrave: u32 = 16785130;
pub const XK_uhorngrave: u32 = 16785131;
pub const XK_Uhornhook: u32 = 16785132;
pub const XK_uhornhook: u32 = 16785133;
pub const XK_Uhorntilde: u32 = 16785134;
pub const XK_uhorntilde: u32 = 16785135;
pub const XK_Uhornbelowdot: u32 = 16785136;
pub const XK_uhornbelowdot: u32 = 16785137;
pub const XK_Ybelowdot: u32 = 16785140;
pub const XK_ybelowdot: u32 = 16785141;
pub const XK_Yhook: u32 = 16785142;
pub const XK_yhook: u32 = 16785143;
pub const XK_Ytilde: u32 = 16785144;
pub const XK_ytilde: u32 = 16785145;
pub const XK_Ohorn: u32 = 16777632;
pub const XK_ohorn: u32 = 16777633;
pub const XK_Uhorn: u32 = 16777647;
pub const XK_uhorn: u32 = 16777648;
pub const XK_EcuSign: u32 = 16785568;
pub const XK_ColonSign: u32 = 16785569;
pub const XK_CruzeiroSign: u32 = 16785570;
pub const XK_FFrancSign: u32 = 16785571;
pub const XK_LiraSign: u32 = 16785572;
pub const XK_MillSign: u32 = 16785573;
pub const XK_NairaSign: u32 = 16785574;
pub const XK_PesetaSign: u32 = 16785575;
pub const XK_RupeeSign: u32 = 16785576;
pub const XK_WonSign: u32 = 16785577;
pub const XK_NewSheqelSign: u32 = 16785578;
pub const XK_DongSign: u32 = 16785579;
pub const XK_EuroSign: u32 = 8364;
pub const XK_zerosuperior: u32 = 16785520;
pub const XK_foursuperior: u32 = 16785524;
pub const XK_fivesuperior: u32 = 16785525;
pub const XK_sixsuperior: u32 = 16785526;
pub const XK_sevensuperior: u32 = 16785527;
pub const XK_eightsuperior: u32 = 16785528;
pub const XK_ninesuperior: u32 = 16785529;
pub const XK_zerosubscript: u32 = 16785536;
pub const XK_onesubscript: u32 = 16785537;
pub const XK_twosubscript: u32 = 16785538;
pub const XK_threesubscript: u32 = 16785539;
pub const XK_foursubscript: u32 = 16785540;
pub const XK_fivesubscript: u32 = 16785541;
pub const XK_sixsubscript: u32 = 16785542;
pub const XK_sevensubscript: u32 = 16785543;
pub const XK_eightsubscript: u32 = 16785544;
pub const XK_ninesubscript: u32 = 16785545;
pub const XK_partdifferential: u32 = 16785922;
pub const XK_emptyset: u32 = 16785925;
pub const XK_elementof: u32 = 16785928;
pub const XK_notelementof: u32 = 16785929;
pub const XK_containsas: u32 = 16785931;
pub const XK_squareroot: u32 = 16785946;
pub const XK_cuberoot: u32 = 16785947;
pub const XK_fourthroot: u32 = 16785948;
pub const XK_dintegral: u32 = 16785964;
pub const XK_tintegral: u32 = 16785965;
pub const XK_because: u32 = 16785973;
pub const XK_approxeq: u32 = 16785992;
pub const XK_notapproxeq: u32 = 16785991;
pub const XK_notidentical: u32 = 16786018;
pub const XK_stricteq: u32 = 16786019;
pub const XK_braille_dot_1: u32 = 65521;
pub const XK_braille_dot_2: u32 = 65522;
pub const XK_braille_dot_3: u32 = 65523;
pub const XK_braille_dot_4: u32 = 65524;
pub const XK_braille_dot_5: u32 = 65525;
pub const XK_braille_dot_6: u32 = 65526;
pub const XK_braille_dot_7: u32 = 65527;
pub const XK_braille_dot_8: u32 = 65528;
pub const XK_braille_dot_9: u32 = 65529;
pub const XK_braille_dot_10: u32 = 65530;
pub const XK_braille_blank: u32 = 16787456;
pub const XK_braille_dots_1: u32 = 16787457;
pub const XK_braille_dots_2: u32 = 16787458;
pub const XK_braille_dots_12: u32 = 16787459;
pub const XK_braille_dots_3: u32 = 16787460;
pub const XK_braille_dots_13: u32 = 16787461;
pub const XK_braille_dots_23: u32 = 16787462;
pub const XK_braille_dots_123: u32 = 16787463;
pub const XK_braille_dots_4: u32 = 16787464;
pub const XK_braille_dots_14: u32 = 16787465;
pub const XK_braille_dots_24: u32 = 16787466;
pub const XK_braille_dots_124: u32 = 16787467;
pub const XK_braille_dots_34: u32 = 16787468;
pub const XK_braille_dots_134: u32 = 16787469;
pub const XK_braille_dots_234: u32 = 16787470;
pub const XK_braille_dots_1234: u32 = 16787471;
pub const XK_braille_dots_5: u32 = 16787472;
pub const XK_braille_dots_15: u32 = 16787473;
pub const XK_braille_dots_25: u32 = 16787474;
pub const XK_braille_dots_125: u32 = 16787475;
pub const XK_braille_dots_35: u32 = 16787476;
pub const XK_braille_dots_135: u32 = 16787477;
pub const XK_braille_dots_235: u32 = 16787478;
pub const XK_braille_dots_1235: u32 = 16787479;
pub const XK_braille_dots_45: u32 = 16787480;
pub const XK_braille_dots_145: u32 = 16787481;
pub const XK_braille_dots_245: u32 = 16787482;
pub const XK_braille_dots_1245: u32 = 16787483;
pub const XK_braille_dots_345: u32 = 16787484;
pub const XK_braille_dots_1345: u32 = 16787485;
pub const XK_braille_dots_2345: u32 = 16787486;
pub const XK_braille_dots_12345: u32 = 16787487;
pub const XK_braille_dots_6: u32 = 16787488;
pub const XK_braille_dots_16: u32 = 16787489;
pub const XK_braille_dots_26: u32 = 16787490;
pub const XK_braille_dots_126: u32 = 16787491;
pub const XK_braille_dots_36: u32 = 16787492;
pub const XK_braille_dots_136: u32 = 16787493;
pub const XK_braille_dots_236: u32 = 16787494;
pub const XK_braille_dots_1236: u32 = 16787495;
pub const XK_braille_dots_46: u32 = 16787496;
pub const XK_braille_dots_146: u32 = 16787497;
pub const XK_braille_dots_246: u32 = 16787498;
pub const XK_braille_dots_1246: u32 = 16787499;
pub const XK_braille_dots_346: u32 = 16787500;
pub const XK_braille_dots_1346: u32 = 16787501;
pub const XK_braille_dots_2346: u32 = 16787502;
pub const XK_braille_dots_12346: u32 = 16787503;
pub const XK_braille_dots_56: u32 = 16787504;
pub const XK_braille_dots_156: u32 = 16787505;
pub const XK_braille_dots_256: u32 = 16787506;
pub const XK_braille_dots_1256: u32 = 16787507;
pub const XK_braille_dots_356: u32 = 16787508;
pub const XK_braille_dots_1356: u32 = 16787509;
pub const XK_braille_dots_2356: u32 = 16787510;
pub const XK_braille_dots_12356: u32 = 16787511;
pub const XK_braille_dots_456: u32 = 16787512;
pub const XK_braille_dots_1456: u32 = 16787513;
pub const XK_braille_dots_2456: u32 = 16787514;
pub const XK_braille_dots_12456: u32 = 16787515;
pub const XK_braille_dots_3456: u32 = 16787516;
pub const XK_braille_dots_13456: u32 = 16787517;
pub const XK_braille_dots_23456: u32 = 16787518;
pub const XK_braille_dots_123456: u32 = 16787519;
pub const XK_braille_dots_7: u32 = 16787520;
pub const XK_braille_dots_17: u32 = 16787521;
pub const XK_braille_dots_27: u32 = 16787522;
pub const XK_braille_dots_127: u32 = 16787523;
pub const XK_braille_dots_37: u32 = 16787524;
pub const XK_braille_dots_137: u32 = 16787525;
pub const XK_braille_dots_237: u32 = 16787526;
pub const XK_braille_dots_1237: u32 = 16787527;
pub const XK_braille_dots_47: u32 = 16787528;
pub const XK_braille_dots_147: u32 = 16787529;
pub const XK_braille_dots_247: u32 = 16787530;
pub const XK_braille_dots_1247: u32 = 16787531;
pub const XK_braille_dots_347: u32 = 16787532;
pub const XK_braille_dots_1347: u32 = 16787533;
pub const XK_braille_dots_2347: u32 = 16787534;
pub const XK_braille_dots_12347: u32 = 16787535;
pub const XK_braille_dots_57: u32 = 16787536;
pub const XK_braille_dots_157: u32 = 16787537;
pub const XK_braille_dots_257: u32 = 16787538;
pub const XK_braille_dots_1257: u32 = 16787539;
pub const XK_braille_dots_357: u32 = 16787540;
pub const XK_braille_dots_1357: u32 = 16787541;
pub const XK_braille_dots_2357: u32 = 16787542;
pub const XK_braille_dots_12357: u32 = 16787543;
pub const XK_braille_dots_457: u32 = 16787544;
pub const XK_braille_dots_1457: u32 = 16787545;
pub const XK_braille_dots_2457: u32 = 16787546;
pub const XK_braille_dots_12457: u32 = 16787547;
pub const XK_braille_dots_3457: u32 = 16787548;
pub const XK_braille_dots_13457: u32 = 16787549;
pub const XK_braille_dots_23457: u32 = 16787550;
pub const XK_braille_dots_123457: u32 = 16787551;
pub const XK_braille_dots_67: u32 = 16787552;
pub const XK_braille_dots_167: u32 = 16787553;
pub const XK_braille_dots_267: u32 = 16787554;
pub const XK_braille_dots_1267: u32 = 16787555;
pub const XK_braille_dots_367: u32 = 16787556;
pub const XK_braille_dots_1367: u32 = 16787557;
pub const XK_braille_dots_2367: u32 = 16787558;
pub const XK_braille_dots_12367: u32 = 16787559;
pub const XK_braille_dots_467: u32 = 16787560;
pub const XK_braille_dots_1467: u32 = 16787561;
pub const XK_braille_dots_2467: u32 = 16787562;
pub const XK_braille_dots_12467: u32 = 16787563;
pub const XK_braille_dots_3467: u32 = 16787564;
pub const XK_braille_dots_13467: u32 = 16787565;
pub const XK_braille_dots_23467: u32 = 16787566;
pub const XK_braille_dots_123467: u32 = 16787567;
pub const XK_braille_dots_567: u32 = 16787568;
pub const XK_braille_dots_1567: u32 = 16787569;
pub const XK_braille_dots_2567: u32 = 16787570;
pub const XK_braille_dots_12567: u32 = 16787571;
pub const XK_braille_dots_3567: u32 = 16787572;
pub const XK_braille_dots_13567: u32 = 16787573;
pub const XK_braille_dots_23567: u32 = 16787574;
pub const XK_braille_dots_123567: u32 = 16787575;
pub const XK_braille_dots_4567: u32 = 16787576;
pub const XK_braille_dots_14567: u32 = 16787577;
pub const XK_braille_dots_24567: u32 = 16787578;
pub const XK_braille_dots_124567: u32 = 16787579;
pub const XK_braille_dots_34567: u32 = 16787580;
pub const XK_braille_dots_134567: u32 = 16787581;
pub const XK_braille_dots_234567: u32 = 16787582;
pub const XK_braille_dots_1234567: u32 = 16787583;
pub const XK_braille_dots_8: u32 = 16787584;
pub const XK_braille_dots_18: u32 = 16787585;
pub const XK_braille_dots_28: u32 = 16787586;
pub const XK_braille_dots_128: u32 = 16787587;
pub const XK_braille_dots_38: u32 = 16787588;
pub const XK_braille_dots_138: u32 = 16787589;
pub const XK_braille_dots_238: u32 = 16787590;
pub const XK_braille_dots_1238: u32 = 16787591;
pub const XK_braille_dots_48: u32 = 16787592;
pub const XK_braille_dots_148: u32 = 16787593;
pub const XK_braille_dots_248: u32 = 16787594;
pub const XK_braille_dots_1248: u32 = 16787595;
pub const XK_braille_dots_348: u32 = 16787596;
pub const XK_braille_dots_1348: u32 = 16787597;
pub const XK_braille_dots_2348: u32 = 16787598;
pub const XK_braille_dots_12348: u32 = 16787599;
pub const XK_braille_dots_58: u32 = 16787600;
pub const XK_braille_dots_158: u32 = 16787601;
pub const XK_braille_dots_258: u32 = 16787602;
pub const XK_braille_dots_1258: u32 = 16787603;
pub const XK_braille_dots_358: u32 = 16787604;
pub const XK_braille_dots_1358: u32 = 16787605;
pub const XK_braille_dots_2358: u32 = 16787606;
pub const XK_braille_dots_12358: u32 = 16787607;
pub const XK_braille_dots_458: u32 = 16787608;
pub const XK_braille_dots_1458: u32 = 16787609;
pub const XK_braille_dots_2458: u32 = 16787610;
pub const XK_braille_dots_12458: u32 = 16787611;
pub const XK_braille_dots_3458: u32 = 16787612;
pub const XK_braille_dots_13458: u32 = 16787613;
pub const XK_braille_dots_23458: u32 = 16787614;
pub const XK_braille_dots_123458: u32 = 16787615;
pub const XK_braille_dots_68: u32 = 16787616;
pub const XK_braille_dots_168: u32 = 16787617;
pub const XK_braille_dots_268: u32 = 16787618;
pub const XK_braille_dots_1268: u32 = 16787619;
pub const XK_braille_dots_368: u32 = 16787620;
pub const XK_braille_dots_1368: u32 = 16787621;
pub const XK_braille_dots_2368: u32 = 16787622;
pub const XK_braille_dots_12368: u32 = 16787623;
pub const XK_braille_dots_468: u32 = 16787624;
pub const XK_braille_dots_1468: u32 = 16787625;
pub const XK_braille_dots_2468: u32 = 16787626;
pub const XK_braille_dots_12468: u32 = 16787627;
pub const XK_braille_dots_3468: u32 = 16787628;
pub const XK_braille_dots_13468: u32 = 16787629;
pub const XK_braille_dots_23468: u32 = 16787630;
pub const XK_braille_dots_123468: u32 = 16787631;
pub const XK_braille_dots_568: u32 = 16787632;
pub const XK_braille_dots_1568: u32 = 16787633;
pub const XK_braille_dots_2568: u32 = 16787634;
pub const XK_braille_dots_12568: u32 = 16787635;
pub const XK_braille_dots_3568: u32 = 16787636;
pub const XK_braille_dots_13568: u32 = 16787637;
pub const XK_braille_dots_23568: u32 = 16787638;
pub const XK_braille_dots_123568: u32 = 16787639;
pub const XK_braille_dots_4568: u32 = 16787640;
pub const XK_braille_dots_14568: u32 = 16787641;
pub const XK_braille_dots_24568: u32 = 16787642;
pub const XK_braille_dots_124568: u32 = 16787643;
pub const XK_braille_dots_34568: u32 = 16787644;
pub const XK_braille_dots_134568: u32 = 16787645;
pub const XK_braille_dots_234568: u32 = 16787646;
pub const XK_braille_dots_1234568: u32 = 16787647;
pub const XK_braille_dots_78: u32 = 16787648;
pub const XK_braille_dots_178: u32 = 16787649;
pub const XK_braille_dots_278: u32 = 16787650;
pub const XK_braille_dots_1278: u32 = 16787651;
pub const XK_braille_dots_378: u32 = 16787652;
pub const XK_braille_dots_1378: u32 = 16787653;
pub const XK_braille_dots_2378: u32 = 16787654;
pub const XK_braille_dots_12378: u32 = 16787655;
pub const XK_braille_dots_478: u32 = 16787656;
pub const XK_braille_dots_1478: u32 = 16787657;
pub const XK_braille_dots_2478: u32 = 16787658;
pub const XK_braille_dots_12478: u32 = 16787659;
pub const XK_braille_dots_3478: u32 = 16787660;
pub const XK_braille_dots_13478: u32 = 16787661;
pub const XK_braille_dots_23478: u32 = 16787662;
pub const XK_braille_dots_123478: u32 = 16787663;
pub const XK_braille_dots_578: u32 = 16787664;
pub const XK_braille_dots_1578: u32 = 16787665;
pub const XK_braille_dots_2578: u32 = 16787666;
pub const XK_braille_dots_12578: u32 = 16787667;
pub const XK_braille_dots_3578: u32 = 16787668;
pub const XK_braille_dots_13578: u32 = 16787669;
pub const XK_braille_dots_23578: u32 = 16787670;
pub const XK_braille_dots_123578: u32 = 16787671;
pub const XK_braille_dots_4578: u32 = 16787672;
pub const XK_braille_dots_14578: u32 = 16787673;
pub const XK_braille_dots_24578: u32 = 16787674;
pub const XK_braille_dots_124578: u32 = 16787675;
pub const XK_braille_dots_34578: u32 = 16787676;
pub const XK_braille_dots_134578: u32 = 16787677;
pub const XK_braille_dots_234578: u32 = 16787678;
pub const XK_braille_dots_1234578: u32 = 16787679;
pub const XK_braille_dots_678: u32 = 16787680;
pub const XK_braille_dots_1678: u32 = 16787681;
pub const XK_braille_dots_2678: u32 = 16787682;
pub const XK_braille_dots_12678: u32 = 16787683;
pub const XK_braille_dots_3678: u32 = 16787684;
pub const XK_braille_dots_13678: u32 = 16787685;
pub const XK_braille_dots_23678: u32 = 16787686;
pub const XK_braille_dots_123678: u32 = 16787687;
pub const XK_braille_dots_4678: u32 = 16787688;
pub const XK_braille_dots_14678: u32 = 16787689;
pub const XK_braille_dots_24678: u32 = 16787690;
pub const XK_braille_dots_124678: u32 = 16787691;
pub const XK_braille_dots_34678: u32 = 16787692;
pub const XK_braille_dots_134678: u32 = 16787693;
pub const XK_braille_dots_234678: u32 = 16787694;
pub const XK_braille_dots_1234678: u32 = 16787695;
pub const XK_braille_dots_5678: u32 = 16787696;
pub const XK_braille_dots_15678: u32 = 16787697;
pub const XK_braille_dots_25678: u32 = 16787698;
pub const XK_braille_dots_125678: u32 = 16787699;
pub const XK_braille_dots_35678: u32 = 16787700;
pub const XK_braille_dots_135678: u32 = 16787701;
pub const XK_braille_dots_235678: u32 = 16787702;
pub const XK_braille_dots_1235678: u32 = 16787703;
pub const XK_braille_dots_45678: u32 = 16787704;
pub const XK_braille_dots_145678: u32 = 16787705;
pub const XK_braille_dots_245678: u32 = 16787706;
pub const XK_braille_dots_1245678: u32 = 16787707;
pub const XK_braille_dots_345678: u32 = 16787708;
pub const XK_braille_dots_1345678: u32 = 16787709;
pub const XK_braille_dots_2345678: u32 = 16787710;
pub const XK_braille_dots_12345678: u32 = 16787711;
pub const XK_Sinh_ng: u32 = 16780674;
pub const XK_Sinh_h2: u32 = 16780675;
pub const XK_Sinh_a: u32 = 16780677;
pub const XK_Sinh_aa: u32 = 16780678;
pub const XK_Sinh_ae: u32 = 16780679;
pub const XK_Sinh_aee: u32 = 16780680;
pub const XK_Sinh_i: u32 = 16780681;
pub const XK_Sinh_ii: u32 = 16780682;
pub const XK_Sinh_u: u32 = 16780683;
pub const XK_Sinh_uu: u32 = 16780684;
pub const XK_Sinh_ri: u32 = 16780685;
pub const XK_Sinh_rii: u32 = 16780686;
pub const XK_Sinh_lu: u32 = 16780687;
pub const XK_Sinh_luu: u32 = 16780688;
pub const XK_Sinh_e: u32 = 16780689;
pub const XK_Sinh_ee: u32 = 16780690;
pub const XK_Sinh_ai: u32 = 16780691;
pub const XK_Sinh_o: u32 = 16780692;
pub const XK_Sinh_oo: u32 = 16780693;
pub const XK_Sinh_au: u32 = 16780694;
pub const XK_Sinh_ka: u32 = 16780698;
pub const XK_Sinh_kha: u32 = 16780699;
pub const XK_Sinh_ga: u32 = 16780700;
pub const XK_Sinh_gha: u32 = 16780701;
pub const XK_Sinh_ng2: u32 = 16780702;
pub const XK_Sinh_nga: u32 = 16780703;
pub const XK_Sinh_ca: u32 = 16780704;
pub const XK_Sinh_cha: u32 = 16780705;
pub const XK_Sinh_ja: u32 = 16780706;
pub const XK_Sinh_jha: u32 = 16780707;
pub const XK_Sinh_nya: u32 = 16780708;
pub const XK_Sinh_jnya: u32 = 16780709;
pub const XK_Sinh_nja: u32 = 16780710;
pub const XK_Sinh_tta: u32 = 16780711;
pub const XK_Sinh_ttha: u32 = 16780712;
pub const XK_Sinh_dda: u32 = 16780713;
pub const XK_Sinh_ddha: u32 = 16780714;
pub const XK_Sinh_nna: u32 = 16780715;
pub const XK_Sinh_ndda: u32 = 16780716;
pub const XK_Sinh_tha: u32 = 16780717;
pub const XK_Sinh_thha: u32 = 16780718;
pub const XK_Sinh_dha: u32 = 16780719;
pub const XK_Sinh_dhha: u32 = 16780720;
pub const XK_Sinh_na: u32 = 16780721;
pub const XK_Sinh_ndha: u32 = 16780723;
pub const XK_Sinh_pa: u32 = 16780724;
pub const XK_Sinh_pha: u32 = 16780725;
pub const XK_Sinh_ba: u32 = 16780726;
pub const XK_Sinh_bha: u32 = 16780727;
pub const XK_Sinh_ma: u32 = 16780728;
pub const XK_Sinh_mba: u32 = 16780729;
pub const XK_Sinh_ya: u32 = 16780730;
pub const XK_Sinh_ra: u32 = 16780731;
pub const XK_Sinh_la: u32 = 16780733;
pub const XK_Sinh_va: u32 = 16780736;
pub const XK_Sinh_sha: u32 = 16780737;
pub const XK_Sinh_ssha: u32 = 16780738;
pub const XK_Sinh_sa: u32 = 16780739;
pub const XK_Sinh_ha: u32 = 16780740;
pub const XK_Sinh_lla: u32 = 16780741;
pub const XK_Sinh_fa: u32 = 16780742;
pub const XK_Sinh_al: u32 = 16780746;
pub const XK_Sinh_aa2: u32 = 16780751;
pub const XK_Sinh_ae2: u32 = 16780752;
pub const XK_Sinh_aee2: u32 = 16780753;
pub const XK_Sinh_i2: u32 = 16780754;
pub const XK_Sinh_ii2: u32 = 16780755;
pub const XK_Sinh_u2: u32 = 16780756;
pub const XK_Sinh_uu2: u32 = 16780758;
pub const XK_Sinh_ru2: u32 = 16780760;
pub const XK_Sinh_e2: u32 = 16780761;
pub const XK_Sinh_ee2: u32 = 16780762;
pub const XK_Sinh_ai2: u32 = 16780763;
pub const XK_Sinh_o2: u32 = 16780764;
pub const XK_Sinh_oo2: u32 = 16780765;
pub const XK_Sinh_au2: u32 = 16780766;
pub const XK_Sinh_lu2: u32 = 16780767;
pub const XK_Sinh_ruu2: u32 = 16780786;
pub const XK_Sinh_luu2: u32 = 16780787;
pub const XK_Sinh_kunddaliya: u32 = 16780788;
pub const PMinSize: u32 = 16;
pub const PMaxSize: u32 = 32;
pub const VisualScreenMask: u32 = 2;
pub const VisualDepthMask: u32 = 4;
pub const VisualRedMaskMask: u32 = 16;
pub const VisualGreenMaskMask: u32 = 32;
pub const VisualBlueMaskMask: u32 = 64;
pub const ShmCompletion: u32 = 0;
pub type XID = ::std::os::raw::c_ulong;
pub type Atom = ::std::os::raw::c_ulong;
pub type VisualID = ::std::os::raw::c_ulong;
pub type Time = ::std::os::raw::c_ulong;
pub type Window = XID;
pub type Drawable = XID;
pub type Font = XID;
pub type Pixmap = XID;
pub type Colormap = XID;
pub type KeySym = XID;
pub type KeyCode = ::std::os::raw::c_uchar;
pub type XPointer = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _XExtData {
    pub number: ::std::os::raw::c_int,
    pub next: *mut _XExtData,
    pub free_private: ::std::option::Option<
        unsafe extern "C" fn(extension: *mut _XExtData) -> ::std::os::raw::c_int,
    >,
    pub private_data: XPointer,
}
pub type XExtData = _XExtData;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XGCValues {
    pub function: ::std::os::raw::c_int,
    pub plane_mask: ::std::os::raw::c_ulong,
    pub foreground: ::std::os::raw::c_ulong,
    pub background: ::std::os::raw::c_ulong,
    pub line_width: ::std::os::raw::c_int,
    pub line_style: ::std::os::raw::c_int,
    pub cap_style: ::std::os::raw::c_int,
    pub join_style: ::std::os::raw::c_int,
    pub fill_style: ::std::os::raw::c_int,
    pub fill_rule: ::std::os::raw::c_int,
    pub arc_mode: ::std::os::raw::c_int,
    pub tile: Pixmap,
    pub stipple: Pixmap,
    pub ts_x_origin: ::std::os::raw::c_int,
    pub ts_y_origin: ::std::os::raw::c_int,
    pub font: Font,
    pub subwindow_mode: ::std::os::raw::c_int,
    pub graphics_exposures: ::std::os::raw::c_int,
    pub clip_x_origin: ::std::os::raw::c_int,
    pub clip_y_origin: ::std::os::raw::c_int,
    pub clip_mask: Pixmap,
    pub dash_offset: ::std::os::raw::c_int,
    pub dashes: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _XGC {
    _unused: [u8; 0],
}
pub type GC = *mut _XGC;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Visual {
    pub ext_data: *mut XExtData,
    pub visualid: VisualID,
    pub class: ::std::os::raw::c_int,
    pub red_mask: ::std::os::raw::c_ulong,
    pub green_mask: ::std::os::raw::c_ulong,
    pub blue_mask: ::std::os::raw::c_ulong,
    pub bits_per_rgb: ::std::os::raw::c_int,
    pub map_entries: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Depth {
    pub depth: ::std::os::raw::c_int,
    pub nvisuals: ::std::os::raw::c_int,
    pub visuals: *mut Visual,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _XDisplay {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Screen {
    pub ext_data: *mut XExtData,
    pub display: *mut _XDisplay,
    pub root: Window,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub mwidth: ::std::os::raw::c_int,
    pub mheight: ::std::os::raw::c_int,
    pub ndepths: ::std::os::raw::c_int,
    pub depths: *mut Depth,
    pub root_depth: ::std::os::raw::c_int,
    pub root_visual: *mut Visual,
    pub default_gc: GC,
    pub cmap: Colormap,
    pub white_pixel: ::std::os::raw::c_ulong,
    pub black_pixel: ::std::os::raw::c_ulong,
    pub max_maps: ::std::os::raw::c_int,
    pub min_maps: ::std::os::raw::c_int,
    pub backing_store: ::std::os::raw::c_int,
    pub save_unders: ::std::os::raw::c_int,
    pub root_input_mask: ::std::os::raw::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _XImage {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub xoffset: ::std::os::raw::c_int,
    pub format: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_char,
    pub byte_order: ::std::os::raw::c_int,
    pub bitmap_unit: ::std::os::raw::c_int,
    pub bitmap_bit_order: ::std::os::raw::c_int,
    pub bitmap_pad: ::std::os::raw::c_int,
    pub depth: ::std::os::raw::c_int,
    pub bytes_per_line: ::std::os::raw::c_int,
    pub bits_per_pixel: ::std::os::raw::c_int,
    pub red_mask: ::std::os::raw::c_ulong,
    pub green_mask: ::std::os::raw::c_ulong,
    pub blue_mask: ::std::os::raw::c_ulong,
    pub obdata: XPointer,
    pub f: _XImage_funcs,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _XImage_funcs {
    pub create_image: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XDisplay,
            arg2: *mut Visual,
            arg3: ::std::os::raw::c_uint,
            arg4: ::std::os::raw::c_int,
            arg5: ::std::os::raw::c_int,
            arg6: *mut ::std::os::raw::c_char,
            arg7: ::std::os::raw::c_uint,
            arg8: ::std::os::raw::c_uint,
            arg9: ::std::os::raw::c_int,
            arg10: ::std::os::raw::c_int,
        ) -> *mut _XImage,
    >,
    pub destroy_image:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut _XImage) -> ::std::os::raw::c_int>,
    pub get_pixel: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XImage,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong,
    >,
    pub put_pixel: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XImage,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    pub sub_image: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XImage,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_uint,
            arg5: ::std::os::raw::c_uint,
        ) -> *mut _XImage,
    >,
    pub add_pixel: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut _XImage,
            arg2: ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int,
    >,
}
pub type XImage = _XImage;
pub type Display = _XDisplay;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XKeyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub keycode: ::std::os::raw::c_uint,
    pub same_screen: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XButtonEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub button: ::std::os::raw::c_uint,
    pub same_screen: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XMotionEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
    pub is_hint: ::std::os::raw::c_char,
    pub same_screen: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XCrossingEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub root: Window,
    pub subwindow: Window,
    pub time: Time,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub x_root: ::std::os::raw::c_int,
    pub y_root: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
    pub detail: ::std::os::raw::c_int,
    pub same_screen: ::std::os::raw::c_int,
    pub focus: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XFocusChangeEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub mode: ::std::os::raw::c_int,
    pub detail: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XKeymapEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub key_vector: [::std::os::raw::c_char; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XExposeEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XGraphicsExposeEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub drawable: Drawable,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
    pub major_code: ::std::os::raw::c_int,
    pub minor_code: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XNoExposeEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub drawable: Drawable,
    pub major_code: ::std::os::raw::c_int,
    pub minor_code: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XVisibilityEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XCreateWindowEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub border_width: ::std::os::raw::c_int,
    pub override_redirect: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XDestroyWindowEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XUnmapEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub from_configure: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XMapEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub override_redirect: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XMapRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XReparentEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub parent: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub override_redirect: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XConfigureEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub border_width: ::std::os::raw::c_int,
    pub above: Window,
    pub override_redirect: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XGravityEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XResizeRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XConfigureRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub border_width: ::std::os::raw::c_int,
    pub above: Window,
    pub detail: ::std::os::raw::c_int,
    pub value_mask: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XCirculateEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub event: Window,
    pub window: Window,
    pub place: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XCirculateRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub parent: Window,
    pub window: Window,
    pub place: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XPropertyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub atom: Atom,
    pub time: Time,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XSelectionClearEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub selection: Atom,
    pub time: Time,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XSelectionRequestEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub owner: Window,
    pub requestor: Window,
    pub selection: Atom,
    pub target: Atom,
    pub property: Atom,
    pub time: Time,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XSelectionEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub requestor: Window,
    pub selection: Atom,
    pub target: Atom,
    pub property: Atom,
    pub time: Time,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XColormapEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub colormap: Colormap,
    pub new: ::std::os::raw::c_int,
    pub state: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XClientMessageEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub message_type: Atom,
    pub format: ::std::os::raw::c_int,
    pub data: XClientMessageEvent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XClientMessageEvent__bindgen_ty_1 {
    pub b: [::std::os::raw::c_char; 20usize],
    pub s: [::std::os::raw::c_short; 10usize],
    pub l: [::std::os::raw::c_long; 5usize],
    _bindgen_union_align: [u64; 5usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XMappingEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
    pub request: ::std::os::raw::c_int,
    pub first_keycode: ::std::os::raw::c_int,
    pub count: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XErrorEvent {
    pub type_: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub resourceid: XID,
    pub serial: ::std::os::raw::c_ulong,
    pub error_code: ::std::os::raw::c_uchar,
    pub request_code: ::std::os::raw::c_uchar,
    pub minor_code: ::std::os::raw::c_uchar,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XAnyEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub window: Window,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XGenericEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub extension: ::std::os::raw::c_int,
    pub evtype: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XGenericEventCookie {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub extension: ::std::os::raw::c_int,
    pub evtype: ::std::os::raw::c_int,
    pub cookie: ::std::os::raw::c_uint,
    pub data: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _XEvent {
    pub type_: ::std::os::raw::c_int,
    pub xany: XAnyEvent,
    pub xkey: XKeyEvent,
    pub xbutton: XButtonEvent,
    pub xmotion: XMotionEvent,
    pub xcrossing: XCrossingEvent,
    pub xfocus: XFocusChangeEvent,
    pub xexpose: XExposeEvent,
    pub xgraphicsexpose: XGraphicsExposeEvent,
    pub xnoexpose: XNoExposeEvent,
    pub xvisibility: XVisibilityEvent,
    pub xcreatewindow: XCreateWindowEvent,
    pub xdestroywindow: XDestroyWindowEvent,
    pub xunmap: XUnmapEvent,
    pub xmap: XMapEvent,
    pub xmaprequest: XMapRequestEvent,
    pub xreparent: XReparentEvent,
    pub xconfigure: XConfigureEvent,
    pub xgravity: XGravityEvent,
    pub xresizerequest: XResizeRequestEvent,
    pub xconfigurerequest: XConfigureRequestEvent,
    pub xcirculate: XCirculateEvent,
    pub xcirculaterequest: XCirculateRequestEvent,
    pub xproperty: XPropertyEvent,
    pub xselectionclear: XSelectionClearEvent,
    pub xselectionrequest: XSelectionRequestEvent,
    pub xselection: XSelectionEvent,
    pub xcolormap: XColormapEvent,
    pub xclient: XClientMessageEvent,
    pub xmapping: XMappingEvent,
    pub xerror: XErrorEvent,
    pub xkeymap: XKeymapEvent,
    pub xgeneric: XGenericEvent,
    pub xcookie: XGenericEventCookie,
    pub pad: [::std::os::raw::c_long; 24usize],
    _bindgen_union_align: [u64; 24usize],
}
pub type XEvent = _XEvent;
extern "C" {
    pub fn XOpenDisplay(arg1: *const ::std::os::raw::c_char) -> *mut Display;
}
extern "C" {
    pub fn XInternAtom(
        arg1: *mut Display,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> Atom;
}
extern "C" {
    pub fn XCreateGC(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: ::std::os::raw::c_ulong,
        arg4: *mut XGCValues,
    ) -> GC;
}
extern "C" {
    pub fn XCreateSimpleWindow(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_uint,
        arg6: ::std::os::raw::c_uint,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_ulong,
        arg9: ::std::os::raw::c_ulong,
    ) -> Window;
}
extern "C" {
    pub fn XKeycodeToKeysym(
        arg1: *mut Display,
        arg2: KeyCode,
        arg3: ::std::os::raw::c_int,
    ) -> KeySym;
}
extern "C" {
    pub fn XRootWindowOfScreen(arg1: *mut Screen) -> Window;
}
extern "C" {
    pub fn XDefaultVisualOfScreen(arg1: *mut Screen) -> *mut Visual;
}
extern "C" {
    pub fn XBlackPixelOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn XDefaultScreenOfDisplay(arg1: *mut Display) -> *mut Screen;
}
extern "C" {
    pub fn XScreenNumberOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSetWMProtocols(
        arg1: *mut Display,
        arg2: Window,
        arg3: *mut Atom,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XClearWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XCloseDisplay(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XConnectionNumber(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDefaultDepthOfScreen(arg1: *mut Screen) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XDestroyWindow(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFlush(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFree(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XFreeGC(arg1: *mut Display, arg2: GC) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XMapRaised(arg1: *mut Display, arg2: Window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XNextEvent(arg1: *mut Display, arg2: *mut XEvent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XPending(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XSelectInput(
        arg1: *mut Display,
        arg2: Window,
        arg3: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XSizeHints {
    pub flags: ::std::os::raw::c_long,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub min_width: ::std::os::raw::c_int,
    pub min_height: ::std::os::raw::c_int,
    pub max_width: ::std::os::raw::c_int,
    pub max_height: ::std::os::raw::c_int,
    pub width_inc: ::std::os::raw::c_int,
    pub height_inc: ::std::os::raw::c_int,
    pub min_aspect: XSizeHints__bindgen_ty_1,
    pub max_aspect: XSizeHints__bindgen_ty_1,
    pub base_width: ::std::os::raw::c_int,
    pub base_height: ::std::os::raw::c_int,
    pub win_gravity: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XSizeHints__bindgen_ty_1 {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
}
extern "C" {
    pub fn XDestroyImage(ximage: *mut XImage) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XVisualInfo {
    pub visual: *mut Visual,
    pub visualid: VisualID,
    pub screen: ::std::os::raw::c_int,
    pub depth: ::std::os::raw::c_int,
    pub class: ::std::os::raw::c_int,
    pub red_mask: ::std::os::raw::c_ulong,
    pub green_mask: ::std::os::raw::c_ulong,
    pub blue_mask: ::std::os::raw::c_ulong,
    pub colormap_size: ::std::os::raw::c_int,
    pub bits_per_rgb: ::std::os::raw::c_int,
}
extern "C" {
    pub fn XAllocSizeHints() -> *mut XSizeHints;
}
extern "C" {
    pub fn XGetVisualInfo(
        arg1: *mut Display,
        arg2: ::std::os::raw::c_long,
        arg3: *mut XVisualInfo,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut XVisualInfo;
}
extern "C" {
    pub fn XSetWMNormalHints(arg1: *mut Display, arg2: Window, arg3: *mut XSizeHints);
}
pub type ShmSeg = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XShmCompletionEvent {
    pub type_: ::std::os::raw::c_int,
    pub serial: ::std::os::raw::c_ulong,
    pub send_event: ::std::os::raw::c_int,
    pub display: *mut Display,
    pub drawable: Drawable,
    pub major_code: ::std::os::raw::c_int,
    pub minor_code: ::std::os::raw::c_int,
    pub shmseg: ShmSeg,
    pub offset: ::std::os::raw::c_ulong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XShmSegmentInfo {
    pub shmseg: ShmSeg,
    pub shmid: ::std::os::raw::c_int,
    pub shmaddr: *mut ::std::os::raw::c_char,
    pub readOnly: ::std::os::raw::c_int,
}
extern "C" {
    pub fn XShmQueryExtension(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XShmGetEventBase(arg1: *mut Display) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XShmAttach(arg1: *mut Display, arg2: *mut XShmSegmentInfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XShmDetach(arg1: *mut Display, arg2: *mut XShmSegmentInfo) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XShmPutImage(
        arg1: *mut Display,
        arg2: Drawable,
        arg3: GC,
        arg4: *mut XImage,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
        arg9: ::std::os::raw::c_uint,
        arg10: ::std::os::raw::c_uint,
        arg11: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn XShmCreateImage(
        arg1: *mut Display,
        arg2: *mut Visual,
        arg3: ::std::os::raw::c_uint,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_char,
        arg6: *mut XShmSegmentInfo,
        arg7: ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
    ) -> *mut XImage;
}
