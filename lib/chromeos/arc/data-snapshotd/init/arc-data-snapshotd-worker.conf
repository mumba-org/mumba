# Copyright 2021 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

description     "Start arc-data-snapshotd-worker daemon in Chrome OS."
author          "chromium-os-dev@chromium.org"

# arc-data-snapshotd manages a lifetime of arc-data-snapshotd-worker daemon via
# upstart.
# The daemon is responsible for taking and loading of ARC snapshots of data/
# directory.
stop on stopped arc-data-snapshotd

# Killable for memory leaks.
oom score -100

respawn
# If the job respawns 3 times in 10 seconds, stop trying.
respawn limit 3 10

import CHROMEOS_USER

pre-start script
  mkdir -p -m 550 /run/arc-data-snapshotd
  cp /home/.shadow/salt /run/arc-data-snapshotd/salt
  chown -R arc-data-snapshotd:arc-data-snapshotd /run/arc-data-snapshotd
end script

# Used jailing parameters:
#   -c: capabalities:
#       cap_dac_override,cap_fowner,cap_chown: let arc-data-snapshotd user to
#       copy/remove/stat android-data regardless of file ownership;
#       cap_sys_admin: let arc-data-snapshotd user to modify security
#       attributes of the copied files;
#   --ambient: let subprocesses inherit capabilities;
#   -e: new network namespace;
#   -l: new IPC namespace;
#   -n: the no_new_privs bit;
#   -N: new cgroup namespace;
#   -p: new PID namespace;
#   -I: run a program as init (pid 1) inside a new pid namespace;
#   -v: new VFS namespace;
#   -K: no mount mode is changed by default;
#   -r: remount /proc read-only;
#   --uts: new UTS/hostname namespace;
#   -u, -g: user account and group;
#   --profile=minimalistic-mountns: start with minimal mounts;
#   /run/dbus: for communication over bus;
#   /var/cache/arc-data-snapshot: for storing snapshot related info;
#   ${CHROMEOS_USER_HOME}/android-data: for taking/loading snapshots of
#       android-data directory;
#   /run/arc-data-snapshotd: for storing salt and system UI image;
#   -S: apply seccomp filters.
script
  logger -t "${UPSTART_JOB}" "Start arc-data-snapshotd-worker"
  set -x

  CHROMEOS_USER_HOME=$(cryptohome-path system "${CHROMEOS_USER}")

  if [ ! -d "${CHROMEOS_USER_HOME}" ]; then
    logger -t "${UPSTART_JOB}" "${CHROMEOS_USER_HOME} doesnt exist"
    return
  fi

  if [ ! -d "${CHROMEOS_USER_HOME}/android-data" ]; then
    logger -t "${UPSTART_JOB}" "Create android-data"
    mkdir -p -m 700 "${CHROMEOS_USER_HOME}/android-data"
    chown android-root:android-root "${CHROMEOS_USER_HOME}/android-data"
  fi

  exec minijail0 -c 'cap_dac_override,cap_chown,cap_fowner,cap_sys_admin+eip' \
      --ambient -e -l -n -N -p -I -v -K -r --uts \
      -u arc-data-snapshotd -g arc-data-snapshotd \
      --profile=minimalistic-mountns \
      -k 'tmpfs,/run,tmpfs,MS_NODEV|MS_NOSUID|MS_NOEXEC,mode=755,size=10M' \
      -b /run/dbus \
      -k 'tmpfs,/var,tmpfs,MS_NODEV|MS_NOSUID|MS_NOEXEC,mode=755,size=10M' \
      -b /var/cache/arc-data-snapshot,,1 \
      -k 'tmpfs,/home,tmpfs,MS_NODEV|MS_NOSUID|MS_NOEXEC' \
      -k "tmpfs,${CHROMEOS_USER_HOME},tmpfs,MS_NODEV|MS_NOSUID|MS_NOEXEC" \
      -b "${CHROMEOS_USER_HOME}/android-data",,1 \
      -b /run/arc-data-snapshotd \
      -S /usr/share/policy/arc-data-snapshotd-seccomp.policy \
      -- /usr/bin/arc-data-snapshotd-worker
end script

# Wait for daemon to claim its D-Bus name before transitioning to started.
post-start exec minijail0 -u arc-data-snapshotd -g arc-data-snapshotd \
    /usr/bin/gdbus wait --system --timeout 15 \
    org.chromium.ArcDataSnapshotdWorker

post-stop script
  logger -t "${UPSTART_JOB}" "Post-stop arc-data-snapshotd-worker"
end script
