# Copyright 2021 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

description    "Mount Android's Play files directory using mount-passthrough."
author         "chromium-os-dev@chromium.org"

start on starting arcvm-post-login-services
stop on stopping arcvm-post-login-services

# TODO(b/164939771): Choose a better OOM score which guarantees the Chrome
# browser process is always terminated before this one.
oom score never

# Set VM size soft limit to 1 GB. See arcvm-mount-myfiles.conf for rationale.
# TODO(b/164936284): Specify a lower limit after improving mount-passthrough.
limit as 1000000000 unlimited

import CHROMEOS_USER

env DEST=/run/arc/sdcard/write/emulated
env UMASK=007
env ANDROID_ROOT_UID=0
env ANDROID_EVERYBODY_GID=9997

script
  # Check whether the cryptohome root directory for the user actually exists.
  CRYPTOHOME_ROOT_PATH=$(cryptohome-path system "${CHROMEOS_USER}")
  if [ ! -d "${CRYPTOHOME_ROOT_PATH}" ]; then
    logger -t "${UPSTART_JOB}" \
      "Cryptohome root directory ${CRYPTOHOME_ROOT_PATH} does not exist"
    exit 1
  fi

  # Ensure the existence of the source directory. It is usually created by
  # arc-create-data, but just creating it earlier than that does no harm.
  # This is because the mode and owner of the directory are properly set up by
  # InstallDirectory() regardless of the timing it is created.
  # TODO(b/123669632): Remove the mkdir command after guaranteeing that the
  # directory is always created by arc-create-data before mounting it.
  SOURCE="${CRYPTOHOME_ROOT_PATH}/android-data/data/media"
  mkdir -p "${SOURCE}"

  # Create the destination directory. Note that /run/arc/sdcard needs to be a
  # shared mount point at this point so that all "Play files" features work.
  mkdir -p "${DEST}"

  exec /usr/sbin/syslog-cat --identifier="${UPSTART_JOB}" -- \
    mount-passthrough-jailed-play "${SOURCE}" "${DEST}" "${UMASK}" \
      "${ANDROID_ROOT_UID}" "${ANDROID_EVERYBODY_GID}"
end script

post-stop script
  # Termination by SIGKILL can result in a stale mount which needs clean-up.
  umount "${DEST}" || true
end script
