# Copyright (c) 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the root build file for GN. GN will start processing by loading this
# file, and recursively load all dependencies until all dependencies are either
# resolved or known not to exist (which will cause the build to fail). So if
# you add a new build file, there must be some path of dependencies from this
# file to your new one or GN won't know about it.

import("//build/config/compiler/compiler.gni")
import("//build/config/features.gni")
import("//build/config/sanitizers/sanitizers.gni")
import("//build/config/ui.gni")
#import("//device/vr/buildflags/buildflags.gni")
import("//lib/media/media_options.gni")
import("//lib/media/gpu/args.gni")
import("//lib/remoting/remoting_enable.gni")
import("//third_party/openh264/openh264_args.gni")
import("//tools/ipc_fuzzer/ipc_fuzzer.gni")
import("//lib/ui/base/ui_features.gni")
import("//lib/ui/ozone/ozone.gni")
import("//v8/gni/v8.gni")
#import("//v8/gni/snapshot_toolchain.gni")
import("//v8/snapshot_toolchain.gni")

if (is_android) {
  import("//build/config/android/config.gni")
}

declare_args() {
  # A list of extra dependencies to add to the root target. This allows a
  # checkout to add additional targets without explicitly changing any checked-
  # in files.
  root_extra_deps = []
}

if (is_official_build) {
  # An official (maximally optimized!) component (optimized for build times)
  # build doesn't make sense and usually doesn't work.
  assert(!is_component_build)
}

# This file defines the following two main targets:
#
# "gn_all" is used to create explicit dependencies from the root BUILD.gn to
# each top-level component that we wish to include when building everything via
# "all". This is required since the set of targets built by "all" is determined
# automatically based on reachability from the root BUILD.gn (for details, see
# crbug.com/503241). Builders should typically use "all", or list targets
# explicitly, rather than relying on "gn_all".
#
# "gn_visibility": targets that are normally not visible to top-level targets,
# but are built anyway by "all". Since we don't want any such targets, we have
# this placeholder to make sure hidden targets that aren't otherwise depended
# on yet are accounted for.

group("gn_all") {
  # # testonly = true

  deps = [
    ":gn_visibility",
    "//bin:mumbactl",
    "//lib/base:base_perftests",
    "//mumba/installer",
    "//lib/base:base_unittests",
    "//lib/net:net_unittests",
    "//lib/skia:skia_unittests",
    "//lib/sql:sql_unittests",
    "//tools/ipc_fuzzer:ipc_fuzzer_all",
    "//lib/ui/base:ui_base_unittests",
    "//lib/url:url_unittests",
  ]

  if (!is_android && !is_chromecast) {
    deps += [
      "//lib/crypto:crypto_unittests",
    ]
  }

  if (!is_fuchsia) {
    deps += [
      "//lib/components:components_unittests",
      "//lib/services:services_unittests",
      "//lib/services/service_manager/public/cpp",
      "//tools/metrics:metrics_metadata",
      "//lib/ui/gfx:gfx_unittests",
    ]
  }

  if (!is_ios && !is_android && !is_fuchsia) {
    deps += [
      "//mumba",
      "//runtime/MumbaShims",
      #"//components/zucchini:zucchini",
      #"//components/zucchini:zucchini_unittests",
      "//lib/gpu/gles2_conform_support:gles2_conform_test",
      "//lib/gpu/khronos_glcts_support:khronos_glcts_test",
      #"//lib/jingle:jingle_unittests",
      "//lib/net:hpack_example_generator",
      #"//lib/printing:printing_unittests",
      "//third_party/cacheinvalidation:cacheinvalidation_unittests",
      "//third_party/pdfium/samples:pdfium_test",
      "//third_party/webrtc/rtc_tools:frame_analyzer",
      #"//lib/tools/battor_agent",
      #"//lib/tools/battor_agent:battor_agent_unittests",
      #"//lib/tools/perf/clear_system_cache",
      #"//lib/tools/traffic_annotation/auditor:traffic_annotation_auditor",
      #"//lib/tools/traffic_annotation/auditor:traffic_annotation_auditor_unittests",
     # "//kit/cpp/ui/accessibility:accessibility_unittests",
      #"//kit/cpp/ui/accessibility/extensions",
    ]
  }

  if (!is_ios) {
    deps += [
      #"//lib/cc:cc_unittests",
      #"//lib/components/policy:policy_templates",
      #"//lib/gpu:gpu_unittests",
      #"//lib/ipc:ipc_tests",
      #"//lib/media:media_unittests",
      #"//lib/media/midi:midi_unittests",
      #"//lib/media/mojo:media_mojo_unittests",
      "//lib/mojo",
      #"//lib/mojo:mojo_unittests",
      #"//lib/net:net_perftests",
      #"//third_party/blink/renderer/controller:webkit_unit_tests",
      #"//third_party/blink/renderer/platform/wtf:wtf_unittests",
      #"//lib/ui/gl:gl_unittests",
      #"//lib/url/ipc:url_ipc_unittests",
    ]
  }

  if (!is_ios && !is_android && !is_chromecast) {
    deps += [
      "//tools/gen",
      #"//tools/gen:gn_unittests",
    ]
  }

  if (!is_ios && !is_fuchsia) {
    deps += [
    #  "//lib/components:components_browsertests",
      "//lib/components/viz:viz_perftests",
      "//lib/components/viz:viz_unittests",
      "//lib/components/viz/common:viz_benchmark",
      "//lib/device:device_unittests",
      "//lib/media/capture:capture_unittests",
      "//lib/media/cast:cast_unittests",
      #"//lib/storage:storage_unittests",
      "//third_party/angle/src/tests:angle_end2end_tests",
      "//third_party/angle/src/tests:angle_unittests",
      "//third_party/angle/src/tests:angle_white_box_tests",
      "//third_party/blink/renderer/platform:blink_platform_unittests",
      "//third_party/blink/renderer/platform/heap:blink_heap_unittests",
      "//third_party/catapult/telemetry:bitmaptools($host_toolchain)",
      "//third_party/smhasher:pmurhash",
      "//tools/imagediff($host_toolchain)",
      "//lib/ui/display:display_unittests",
      "//lib/ui/events:events_unittests",
      "//lib/ui/latency:latency_unittests",
      #"//lib/ui/touch_selection:ui_touch_selection_unittests",
      "//v8:gn_all",
    ]
  } else if (is_ios) {
    deps += [ "//ios:all" ]
  } else if (is_fuchsia) {
    deps += [ ":d8_fuchsia" ]
  }

  deps += root_extra_deps

  #if (toolkit_views) {
  #  deps += [
  #    "//lib/ui/views:views_unittests",
  #    "//lib/ui/views/examples:views_examples_exe",
  #    "//lib/ui/views/examples:views_examples_with_content_exe",
  #  ]
  #}

 # if (use_aura) {
 #   deps += [
 #     "//lib/ui/aura:aura_unittests",
 #     "//lib/ui/aura:demo",
 #     "//lib/ui/wm:wm_unittests",
 #   ]
 # }

  if (use_ozone) {
    deps += [
      "//lib/ui/ozone",
      "//lib/ui/ozone:ozone_unittests",
    ]

    # TODO(crbug.com/766360): These require a working GL implementation.
    if (!is_fuchsia) {
      deps += [
        "//lib/ui/ozone/demo",
        "//lib/ui/ozone/gl:ozone_gl_unittests",
      ]
    }

    if (ozone_platform_x11) {
      deps += [ "//lib/ui/ozone:ozone_x11_unittests" ]
    }
  }

  if (use_x11 || ozone_platform_x11) {
    deps += [ "//tools/xdisplaycheck" ]
  }

  if (is_android) {
    deps += [
      "//lib/base:base_junit_tests",
      "//lib/base/android/jni_generator:jni_generator_tests",
      "//lib/base/android/linker:chromium_android_linker",
      "//build/android/gyp/test:hello_world",
      "//build/android/gyp/test:hello_world",
      "//build/android/stacktrace:java_deobfuscate",
       "//lib/device:device_junit_tests",
      "//lib/media/gpu:video_decode_accelerator_unittest",
      "//lib/net/android:net_junit_tests",
      "//lib/services:service_junit_tests",
      "//lib/testing/android/junit:junit_unit_tests",
      "//third_party/android_async_task:android_async_task_java",
      "//third_party/catapult/devil",
      "//third_party/errorprone:errorprone_java",
      "//third_party/smhasher:murmurhash3",
      "//tools/android:android_tools",
      "//tools/android:memconsumer",
      "//tools/android:push_apps_to_background",
      "//tools/android/audio_focus_grabber:audio_focus_grabber_apk",
      "//tools/android/customtabs_benchmark:customtabs_benchmark_apk",
      "//tools/android/errorprone_plugin:errorprone_plugin_java",
      "//tools/android/kerberos/SpnegoAuthenticator:spnego_authenticator_apk",
      "//lib/ui/android:ui_junit_tests",
    ]
    deps -= [
      "//lib/net:net_perftests",
      "//lib/url:url_unittests",
    ]

    if (!is_chromecast) {
      deps += [
        "//android_webview",
        "//android_webview/test",
        "//android_webview/tools/automated_ui_tests:webview_ui_test_app",
        "//android_webview/tools/system_webview_shell",
        "//third_party/custom_tabs_client:custom_tabs_client_example_apk",
      ]
    }

    if (target_cpu != "x64") {
      deps += [
        "//third_party/android_platform:android_relocation_packer_unittests($host_toolchain)",
      ]
    }

    if (enable_chrome_android_internal) {
      deps += [ "//clank" ]
    }
  }

  # NOTE: The following should really be 'is_android', but the fuzzing build
  #       seems currently broken for this platform at the moment, and the
  #       corresponding code build and works on Linux unmodified.
  #       See instructions in the corresponding BUILD.gn.
  if (is_linux) {
    deps +=
        [ "//third_party/android_crazy_linker:android_crazy_linker_zip_fuzzer" ]
  }

  if (is_linux || is_android) {
    deps += [
      "//third_party/breakpad:breakpad_unittests",
      "//third_party/breakpad:core-2-minidump",
      "//third_party/breakpad:generate_test_dump",
      "//third_party/breakpad:minidump-2-core",
    ]
  }

  if (is_chromeos || is_mac || is_win) {
    deps += [
      #"//rlz:rlz_id",
      #"//rlz:rlz_lib",
      #"//rlz:rlz_unittests",
    ]
  }

  if (is_linux) {
    # The following are definitely linux-only.
    deps += [
      #"//chrome:xdg_mime",
      "//lib/net:disk_cache_memory_test",
      "//lib/net:quic_client",
      "//lib/net:quic_server",
      "//lib/sandbox/linux:mumba_sandbox",
      "//lib/sandbox/linux:sandbox_linux_unittests",
      "//lib/testing:empty_main",
    ]

    if (use_dbus) {
      deps += [
        "//lib/dbus:dbus_test_server",
        "//lib/dbus:dbus_unittests",
      ]
    }

  }

  if (is_ios || is_win || (is_linux && !is_chromeos)) {
    deps += [
      "//lib/base:base_i18n_perftests",
    ]
  }

  if ((is_win || is_mac || is_linux || is_chromeos) &&
      (target_cpu == "x86" || target_cpu == "x64")) {
    deps += [ "//third_party/swiftshader" ]
  }

  # TODO(GYP): Figure out which of these should (and can) build
  # for chromeos/ios.
  if (!is_ios && !is_fuchsia) {
    deps += [
      "//lib/base:build_utf8_validator_tables",
      "//lib/base:check_example",
      "//lib/cc:cc_perftests",
      "//lib/cc/blink:cc_blink_unittests",
      #"//components:components_perftests",
      "//lib/device:device_unittests",
      "//lib/gin:gin_shell",
      "//lib/gin:gin_unittests",
      "//lib/gpu:command_buffer_perftests",
      "//lib/gpu:gl_tests",
      "//lib/gpu:gpu_perftests",
     # "//lib/ipc:ipc_perftests",
      "//lib/media:media_perftests",
      "//lib/net:dump_cache",
      "//third_party/libphonenumber:libphonenumber_unittests",
      "//kit/cpp/ui/compositor:compositor_unittests",
    ]

    if (!is_android) {
      deps += [
        "//lib/courgette:courgette",
        "//lib/courgette:courgette_fuzz",
        "//lib/courgette:courgette_minimal_tool",
        "//lib/courgette:courgette_unittests",
        "//lib/media/cast:generate_barcode_video",
        "//lib/media/cast:generate_timecode_audio",
        "//lib/net:crash_cache",
        "//lib/net:dns_fuzz_stub",
        "//lib/net:gdig",
        "//lib/net:net_watcher",  # TODO(GYP): This should be conditional on use_v8_in_net
        "//lib/net:run_testserver",
        "//lib/net:stress_cache",
        "//lib/net:tld_cleanup",
        "//third_party/leveldatabase:env_chromium_unittests",
        "//third_party/libaddressinput:libaddressinput_unittests",
      ]
    }
    
    if (media_use_ffmpeg && !is_android) {
      deps += [ "//lib/media:ffmpeg_regression_tests" ]
    }
  }

  if (is_android || (is_linux && !is_chromeos)) {
    deps += [
      "//lib/mojo:mojo_perftests",
      "//lib/services/service_manager/public/cpp",
      "//lib/testing/gmock:gmock_main",
      "//third_party/breakpad:dump_syms($host_toolchain)",
      "//third_party/breakpad:microdump_stackwalk($host_toolchain)",
      "//third_party/breakpad:minidump_dump($host_toolchain)",
      "//third_party/breakpad:minidump_stackwalk($host_toolchain)",
    ]

    if (!is_android) {
      deps += [
        "//lib/gpu/khronos_glcts_support:khronos_glcts_test",
        "//lib/media/cast:cast_benchmarks",
        "//lib/media/cast:tap_proxy",
        "//lib/skia:filter_fuzz_stub",
        "//lib/skia:image_operations_bench",
        "//third_party/sqlite:sqlite_shell",
        #"//lib/ui/keyboard:keyboard_unittests",
        #"//lib/ui/snapshot:snapshot_unittests",
      ]
    }

    if (use_x11) {
      if (target_cpu != "arm") {
        deps += [ "//lib/gpu/tools/compositor_model_bench" ]
      }
    }
  }

  if (is_mac) {
    deps += [
      "//third_party/apple_sample_code",
      "//third_party/breakpad:crash_inspector",
      "//third_party/breakpad:dump_syms",
      "//third_party/molokocacao",
    ]
    deps -= [
      # Mojo in GN contains some things which are never compiled in GYP on Mac,
      # so compilation fails on Mac. They need porting.
      "//lib/mojo",
    ]
  }

  if (is_win) {
    deps += [
      #"//base:pe_image_test",
      #"//lib/components/wifi:wifi_test",
      #"//lib/components/zucchini",
      "//lib/net:quic_client",
      "//lib/net:quic_server",
      "//lib/sandbox/win:pocdll",
      "//lib/sandbox/win:sandbox_poc",
      #"//lib/sandbox/win:sbox_integration_tests",
      #"//lib/sandbox/win:sbox_unittests",
     # "//lib/sandbox/win:sbox_validation_tests",
      "//lib/testing/gtest:gtest_main",
      "//third_party/tcmalloc:addr2line-pdb",

      # The following two are accessibility API debugging tools.
      "//tools/accessibility/inspect:ax_dump_events",
      "//tools/accessibility/inspect:ax_dump_tree",
      "//tools/win/chromeexts:chromeexts",
    ]

    # TODO(thakis): Enable this in cross builds, https://crbug.com/799827
    #if (!(is_component_build && is_debug && target_cpu == "x86") &&
    #    host_os == "win") {
    #  deps += [ "//chrome/test/mini_installer:mini_installer_tests" ]
    #}
  } else if (!is_android && !is_ios && !is_fuchsia) {
    deps += [ "//third_party/breakpad:symupload($host_toolchain)" ]
  }

  if (is_mac || is_win || is_android || (is_linux && !is_chromeos)) {
    deps += [
      #"//third_party/crashpad/crashpad:crashpad_tests",
      "//third_party/crashpad/crashpad/handler:crashpad_handler",
      "//third_party/crashpad/crashpad/tools:crashpad_database_util",
    ]
  }

  if (use_openh264) {
    deps += [
      "//third_party/openh264:common",
      "//third_party/openh264:encoder",
      "//third_party/openh264:processing",
    ]
  }

  if (is_win || is_linux) {
    deps += [
      #"//mash:all",
      "//lib/media/mojo/services:media_service_unittests",
      "//lib/mojo",
      #"//lib/services/ui/demo",
      #"//lib/services/ui/ws:tests",
      #"//lib/ui/views/mus:views_mus_interactive_ui_tests",
      #"//lib/ui/views/mus:views_mus_unittests",
    ]

    # crbug.com/676055: media_service_unittests fails to link under Windows
    # component builds, due to duplicate symbol definitions.
    if (is_win && is_component_build) {
      deps -= [ "//lib/media/mojo/services:media_service_unittests" ]
    }
  }

  if (is_mac || is_linux || is_android) {
    deps += [ "//third_party/perfetto:all" ]
  }

  if (is_linux && !is_chromeos && !is_chromecast) {
    # TODO(GYP): Figure out if any of these should be in gn_all
    # and figure out how cross-platform they are
    deps += [
      #"//lib/components/constrained_window:unit_tests",
      #"//lib/components/metrics:serialization",
      #"//lib/components/rappor:unit_tests",
      "//lib/components/services/filesystem:filesystem_service_unittests",
      "//lib/components/services/leveldb:leveldb_service_unittests",
      #"//lib/components/sessions:unit_tests",
      "//lib/media/blink:media_blink_unittests",
      "//lib/media/cast:udp_proxy",
      #"//lib/storage/browser:dump_file_system",
      "//third_party/angle:libANGLE",
      "//third_party/angle:libEGL",
      "//third_party/angle:libGLESv2",
      "//third_party/leveldatabase:leveldb_test_targets",
      "//third_party/libjpeg_turbo:simd",
      "//third_party/opus:opus_compare",
      "//third_party/opus:opus_demo",
      "//third_party/opus:test_opus_api",
      "//third_party/opus:test_opus_decode",
      "//third_party/opus:test_opus_encode",
      "//third_party/opus:test_opus_padding",
      "//third_party/webrtc/system_wrappers:field_trial_default",
      "//third_party/webrtc/system_wrappers:metrics_default",
      "//lib/ui/display/types",
      #"//lib/ui/shell_dialogs:shell_dialogs_unittests",
    ]

    if (target_cpu == "x86" || target_cpu == "x64") {
      #if (!is_android) {
      #  deps += [ "//chrome/test:load_library_perf_tests" ]
      #}
      #if (enable_nacl) {
      #  deps += [ "//native_client/src/trusted/platform_qualify:vcpuid" ]
      #}
      deps += [ "//third_party/libjpeg_turbo:simd_asm" ]
    }
    if (is_linux && current_toolchain == host_toolchain) {
      deps += [ "//v8:v8_shell" ]
    }
  }

  if ((is_linux && !is_chromeos && !is_chromecast) || (is_win && use_drfuzz) ||
      (use_libfuzzer && is_mac)) {
    deps += [
      "//lib/testing/libfuzzer/fuzzers",
      "//lib/testing/libfuzzer/tests:libfuzzer_tests",
      "//third_party/icu/fuzzers",
      "//third_party/qcms:fuzzers",
      "//third_party/zlib/contrib/tests/fuzzers",
    ]
  }

  #if (enable_nacl) {
  #  deps += [ "//native_client_sdk/src:nacl_core_sdk" ]
  #}

  #if (is_linux && use_ozone) {
  #  deps += [
  #    "//headless",
  #    "//headless:headless_tests",
  #  ]
  #}

  #if (enable_vr) {
  #  deps += [
  #    "//chrome/browser/vr:vr_common_perftests",
  #    "//chrome/browser/vr:vr_common_unittests",
  #    "//chrome/browser/vr:vr_pixeltests",
  #  ]
  #  if (is_desktop_linux && use_ozone) {
  #    deps += [ "//chrome/browser/vr/testapp:vr_testapp" ]
  #  }
  #  if (is_android) {
  #    deps += [ "//tools/perf/contrib/vr_benchmarks:vr_perf_tests" ]
  #  }
  #}

  #if (is_fuchsia) {
  #  deps += [
  #    "//headless",
  #    "//headless:headless_shell",
  #    "//headless:headless_tests",
  #    "//webrunner",
  #  ]
  #}
}

if (is_fuchsia) {
  # TODO(https://crbug.com/731217): This can't practically be in //v8 without
  # duplicating all the Fuchsia running infrastructure there.
  fuchsia_executable_runner("d8_fuchsia") {
    exe_target = "//v8:d8"
  }
}

# TODO(GYP_GONE): Figure out if we really need this target or if there's
# some better way to specify things.
if (is_win) {
  group("chrome_official_builder_no_unittests") {
    deps = [
      #"//lib/components/policy:pack_policy_templates",
      #"//lib/components/zucchini",
      "//lib/courgette",
      "//lib/courgette:copy_courgette_binaries",
      #"//lib/remoting/webapp",
      "//tools/metrics:metrics_metadata",
    ]

    if (target_cpu == "x86") {
      if (is_clang) {
        deps += [ "//lib/courgette(//build/toolchain/win:win_clang_x64)" ]
      } else {
        deps += [ "//lib/courgette(//build/toolchain/win:x64)" ]
      }
    }
    #if (is_chrome_branded) {
    #  deps += [ "//remoting/host:remoting_host_installation" ]
    #}
  }

  group("chrome_official_builder") {
    # # testonly = true

    deps = [
      ":chrome_official_builder_no_unittests",
      "//lib/base:base_unittests",
      "//lib/ipc:ipc_tests",
      "//lib/media:media_unittests",
      "//lib/media/midi:midi_unittests",
      "//lib/net:net_unittests",
      #"//lib/printing:printing_unittests",
      "//lib/sql:sql_unittests",
      "//lib/ui/base:ui_base_unittests",
      "//lib/ui/gfx:gfx_unittests",
      #"//lib/ui/touch_selection:ui_touch_selection_unittests",
      "//kit/cpp/ui/views:views_unittests",
      "//lib/url:url_unittests",
    ]
  }
}

group("gn_visibility") {
  deps = [
    "//build/config/sanitizers:options_sources",
     #"//third_party/pdfium:pdfium_embeddertests",  # TODO(GYP): visibility?
     #"//third_party/pdfium:pdfium_unittests",  # TODO(GYP): visibility?
  ]

  if (!is_ios) {
    deps += [ "//v8:postmortem-metadata" ]
    if (v8_use_snapshot && !v8_use_external_startup_data) {
      deps += [ "//v8:v8_snapshot" ]
    }
  }
}

if (!is_ios) {
  # This group includes all of the targets needed to build and test Blink,
  # including running the layout tests (see below).
  group("blink_tests") {
    # # testonly = true

    deps = [
      ":webkit_layout_tests",
      "//third_party/blink/public:all_blink",
    ]
  }

  # Layout tests runner
  # third_party/WebKit/Tools/Scripts/run-webkit-tests
  group("run_webkit_tests") {
    # # testonly = true
    deps = [
      ":webkit_layout_tests",
    ]
  }

  # https://www.chromium.org/developers/testing/webkit-layout-tests

  # The _exparchive at the end of the name indicates to the isolate recipe
  # that the isolate should be archived separately using the `exparchive`
  # command, rather than as part of the normal `batcharchive` command.
  group("webkit_layout_tests_exparchive") {
    # # testonly = true
    deps = [
      ":webkit_layout_tests",
    ]
    data_deps = [
      ":webkit_layout_tests",
    ]
  }

  # This target contains only a small subset of the layout tests,
  # and is useful for testing with the regular isolate mechanism.
  # To run the full layout test suite you need to use
  # :webkit_layout_tests_exparchive, above, instead.
  group("webkit_layout_tests") {
    # # testonly = true
    data_deps = [
      ":layout_test_data_mojo_bindings",
      "//lib/device/bluetooth/public/mojom:fake_bluetooth_interfaces_js_data_deps",
      "//lib/device/usb/public/mojom:mojom_js_data_deps",
      "//lib/device/vr/public/mojom:mojom_js_data_deps",
      "//lib/media/capture/mojom:image_capture_js_data_deps",
      "//lib/mojo/public/interfaces/bindings/tests:test_data_deps",
      "//lib/mojo/public/mojom/base:base_js_data_deps",
      "//lib/services/shape_detection/public/mojom:mojom_js_data_deps",
      "//lib/services/device/public/mojom:mojom_js_data_deps",
      "//lib/services/device/public/mojom:generic_sensor_js_data_deps",
      "//lib/skia/public/interfaces:interfaces_js_data_deps",
      "//third_party/blink/public:blink_devtools_frontend_resources_files",
      "//third_party/blink/public:mojo_bindings_js_data_deps",
      #"//third_party/mesa:osmesa",
      "//tools/imagediff",
    ]

    if (is_android) {
      data_deps += [
        "//third_party/breakpad:breakpad_unittests",
        "//third_party/breakpad:dump_syms",
        "//third_party/breakpad:microdump_stackwalk",
        "//third_party/breakpad:minidump_dump",
        "//third_party/breakpad:minidump_stackwalk",
        "//third_party/breakpad:symupload",
        "//tools/android/forwarder2",
      ]
    }

    if (!is_win && !is_android) {
      data_deps +=
          [ "//third_party/breakpad:minidump_stackwalk($host_toolchain)" ]
    }

    if (is_mac) {
      data_deps += [ "//third_party/breakpad:dump_syms($host_toolchain)" ]
    }

    if (is_linux) {
      data_deps += [ "//third_party/breakpad:dump_syms($host_toolchain)" ]
    }

    if (is_fuchsia) {
      data_deps += [
        "//build/fuchsia/layout_test_proxy:layout_test_proxy_runner",
      ]
    }

    data = [
      "$root_build_dir/resources/inspector/",
      "//lib/testing/scripts/common.py",
      "//lib/testing/scripts/run_isolated_script_test.py",
      "//lib/testing/xvfb.py",
      "//third_party/WebKit/LayoutTests/",
      "//third_party/blink/perf_tests/",
      "//third_party/blink/tools/",
      "//third_party/pywebsocket/",
    ]

    if (is_win) {
      data += [
        "//third_party/apache-win32/",
        "//third_party/perl/",
      ]
    }

    if (is_android) {
      data += [
        "//third_party/catapult/",
        "//build/android/",
      ]
    }
  }

  copy("layout_test_data_mojo_bindings") {
    # # testonly = true

    sources = [
      "$root_gen_dir/lib/mojo/public/js/mojo_bindings.js",
    ]

    outputs = [
      "$root_gen_dir/layout_test_data/mojo/public/js/mojo_bindings.js",
    ]

    deps = [
      "//lib/mojo/public/js:bindings",
    ]
  }

  group("webkit_python_tests") {
    data = [
      "//build/android/",
      "//lib/components/crash/content/tools/generate_breakpad_symbols.py",
      "//lib/testing/scripts/common.py",
      "//lib/testing/scripts/run_isolated_script_test.py",
      "//lib/testing/test_env.py",
      "//lib/testing/xvfb.py",
      "//third_party/WebKit/LayoutTests/ASANExpectations",
      "//third_party/WebKit/LayoutTests/LeakExpectations",
      "//third_party/WebKit/LayoutTests/MSANExpectations",
      "//third_party/WebKit/LayoutTests/NeverFixTests",
      "//third_party/WebKit/LayoutTests/StaleTestExpectations",
      "//third_party/WebKit/LayoutTests/SlowTests",
      "//third_party/WebKit/LayoutTests/TestExpectations",
      "//third_party/WebKit/LayoutTests/VirtualTestSuites",
      "//third_party/blink/renderer/bindings/scripts/",
      "//third_party/blink/renderer/build/scripts/",
      "//third_party/blink/tools/",
      "//third_party/catapult/common/py_utils/",
      "//third_party/catapult/devil/",
      "//third_party/catapult/dependency_manager/",
      "//third_party/catapult/third_party/zipfile/",
      "//third_party/catapult/third_party/typ/",
      "//third_party/depot_tools/pylint.py",
      "//third_party/depot_tools/pylintrc",
      "//third_party/depot_tools/third_party/logilab/",
      "//third_party/depot_tools/third_party/pylint/",
      "//third_party/depot_tools/third_party/pylint.py",
      "//third_party/ply/",
      "//third_party/pymock/",
      "//tools/idl_parser/",
    ]
  }
}

if (!is_ios && !is_android && !is_chromecast && !is_fuchsia) {
  group("jabberwock_builder_asan") {
    # # testonly = true

    deps = [
      "//v8:d8",
    ]
    if (!is_win) {
      deps += [
        "//lib/net:dns_fuzz_stub",
        "//lib/skia:filter_fuzz_stub",
      ]
    }
    if (enable_ipc_fuzzer && !is_component_build) {
      deps += [ "//tools/ipc_fuzzer:ipc_fuzzer_all" ]
    }
    if (!is_chromeos) {
      deps += [
        "//third_party/pdfium/samples:pdfium_test",
        "//v8:v8_shell($v8_snapshot_toolchain)",
      ]
    }
  }
}

if (is_android) {
  group("optimize_gn_gen") {
    deps = [
      # These run expensive scripts in non-default toolchains. Generally, host
      # toolchain targets are loaded in the later part of the run, and the
      # result is they push out the end of generation. By preloading these, the
      # scripts can be parallelized with the rest of the load.
      "//build/config/linux(//build/toolchain/linux:clang_x64)",
      "//build/config/posix(//build/toolchain/linux:clang_x64)",

      # Include x86 toolchains as well since V8 uses them for 32-bit snapshot
      # generation.
      "//build/config/linux(//build/toolchain/linux:clang_x86)",
      "//build/config/posix(//build/toolchain/linux:clang_x86)",
    ]
  }
}

# Because of the source assignment filter, many targets end up over-filtering
# their sources if the output directory contains a platform name. Assert that
# this doesn't happen. http://crbug.com/548283
template("assert_valid_out_dir") {
  # List copied from //build/config/BUILDCONFIG.gn.
  set_sources_assignment_filter([
                                  "*\bandroid/*",
                                  "*\bcocoa/*",
                                  "*\bios/*",
                                  "*\blinux/*",
                                  "*\bmac/*",
                                  "*\bposix/*",
                                  "*\bwin/*",
                                ])
  assert(target_name != "")  # Mark as used.
  sources = invoker.actual_sources
  assert(
      sources == invoker.actual_sources,
      "Do not use a platform name in your output directory (found \"$root_build_dir\"). http://crbug.com/548283")
}

assert_valid_out_dir("_unused") {
  actual_sources = [ "$root_build_dir/foo" ]
}
