import("//build_overrides/build.gni")
import("//build/config/c++/c++.gni")

config("boost_config") {
  configs = [
    "//build/config/compiler:exceptions",
    #"//build/config/compiler:rtti"
  ]
  include_dirs = [
    "src"
  ]

  cflags = [
    "-Wno-unknown-pragmas",
    "-Wno-header-hygiene",
    "-Wno-deprecated-declarations",
    "-Wno-misleading-indentation"
  ]

  defines = [
    # for static libraries
    "BOOST_THREAD_USE_LIB",
    "BOOST_NO_RTTI",
    "BOOST_NO_TYPEID",
    "BOOST_SERIALIZATION_DEFAULT_TYPE_INFO",
    "BOOST_ERROR_CODE_HEADER_ONLY"
    #"BOOST_EXCEPTION_DISABLE",
    #"BOOST_NO_EXCEPTIONS"
  ]
}

static_library("boost_system") {
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    "//build/config/compiler:no_chromium_code",
  ]
  public_configs = [
    ":boost_config"
  ]
  deps = [
    "//buildtools/third_party/libc++"
  ]
  sources = [
    "src/libs/system/src/error_code.cpp"
  ]
}

static_library("boost_atomic") {
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    "//build/config/compiler:no_chromium_code",
  ]
  public_configs = [
    ":boost_config"
  ]
  deps = [
    "//buildtools/third_party/libc++"
  ]
  sources = [
    "src/libs/atomic/src/lockpool.cpp"
  ]
}

static_library("boost_filesystem") {
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    "//build/config/compiler:no_chromium_code",
  ]
  public_configs = [
    ":boost_config"
  ]
  deps = [
    "//buildtools/third_party/libc++"
  ]
  sources = [
    "src/libs/filesystem/src/codecvt_error_category.cpp",
    "src/libs/filesystem/src/operations.cpp",
    "src/libs/filesystem/src/path.cpp",
    "src/libs/filesystem/src/path_traits.cpp",
    "src/libs/filesystem/src/portability.cpp",
    "src/libs/filesystem/src/unique_path.cpp",
    "src/libs/filesystem/src/utf8_codecvt_facet.cpp",
    "src/libs/filesystem/src/windows_file_codecvt.cpp"
  ]
}

static_library("boost_date_time") {
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    "//build/config/compiler:no_chromium_code",
  ]
  public_configs = [
    ":boost_config"
  ]
  deps = [
    "//buildtools/third_party/libc++"
  ]
  sources = [
    "src/libs/date_time/src/gregorian/date_generators.cpp",
    "src/libs/date_time/src/gregorian/greg_month.cpp",
    "src/libs/date_time/src/gregorian/greg_weekday.cpp",
    "src/libs/date_time/src/gregorian/gregorian_types.cpp",
    "src/libs/date_time/src/posix_time/posix_time_types.cpp"
  ] 
}

static_library("boost_thread") {
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    "//build/config/compiler:no_chromium_code",
  ]
  public_configs = [
    ":boost_config"
  ]
  deps = [
    "//buildtools/third_party/libc++"
  ]
  sources = [
    "src/libs/thread/src/future.cpp"
  ] 
  if (current_os == "windows") {
    sources += [
      "src/libs/thread/src/win32/thread.cpp",
      "src/libs/thread/src/win32/thread_primitives.cpp",
      "src/libs/thread/src/win32/tss_dll.cpp",
      "src/libs/thread/src/win32/tss_pe.cpp",
    ]
  }
  if (current_os == "posix") {
    sources += [
      "src/libs/thread/src/pthread/once.cpp",
      "src/libs/thread/src/pthread/once_atomic.cpp",
      "src/libs/thread/src/pthread/thread.cpp",
    ]
  }
}

static_library("boost_serialization") {
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    "//build/config/compiler:no_chromium_code",
  ]
  public_configs = [
    ":boost_config"
  ]
  deps = [
    "//buildtools/third_party/libc++"
  ]
  sources = [
    "src/libs/serialization/src/archive_exception.cpp",
    "src/libs/serialization/src/basic_archive.cpp",
    "src/libs/serialization/src/basic_iarchive.cpp",
    "src/libs/serialization/src/basic_iserializer.cpp",
    "src/libs/serialization/src/basic_oarchive.cpp",
    "src/libs/serialization/src/basic_oserializer.cpp",
    "src/libs/serialization/src/basic_pointer_iserializer.cpp",
    "src/libs/serialization/src/basic_pointer_oserializer.cpp",
    "src/libs/serialization/src/basic_serializer_map.cpp",
    "src/libs/serialization/src/basic_text_iprimitive.cpp",
    "src/libs/serialization/src/basic_text_oprimitive.cpp",
    "src/libs/serialization/src/basic_xml_archive.cpp",
    "src/libs/serialization/src/binary_iarchive.cpp",
    "src/libs/serialization/src/binary_oarchive.cpp",
    "src/libs/serialization/src/extended_type_info_no_rtti.cpp",
    #"src/libs/serialization/src/extended_type_info_typeid.cpp",
    "src/libs/serialization/src/extended_type_info.cpp",
    "src/libs/serialization/src/polymorphic_iarchive.cpp",
    "src/libs/serialization/src/polymorphic_oarchive.cpp",
    "src/libs/serialization/src/stl_port.cpp",
    "src/libs/serialization/src/text_iarchive.cpp",
    "src/libs/serialization/src/text_oarchive.cpp",
    "src/libs/serialization/src/void_cast.cpp",
    "src/libs/serialization/src/xml_archive_exception.cpp",
    "src/libs/serialization/src/xml_iarchive.cpp",
    "src/libs/serialization/src/xml_oarchive.cpp",
    "src/libs/serialization/src/xml_grammar.cpp",
    "src/libs/serialization/src/utf8_codecvt_facet.cpp",
    #"src/libs/serialization/src/basic_xml_grammar.ipp",
  ] 
}

static_library("boost_signals") {
  configs -= [ "//build/config/compiler:chromium_code" ]
  configs += [
    "//build/config/compiler:no_chromium_code",
  ]
  public_configs = [
    ":boost_config"
  ]
  deps = [
    "//buildtools/third_party/libc++"
  ]
  sources = [
    #"src/libs/signals/src/connection.cpp",
    #"src/libs/signals/src/named_slot_map.cpp",
    #"src/libs/signals/src/signal_base.cpp",
    #"src/libs/signals/src/slot.cpp",
    #"src/libs/signals/src/trackable.cpp",
  ] 
}