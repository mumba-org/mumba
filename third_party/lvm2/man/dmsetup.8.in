.TH DMSETUP 8 "Apr 06 2006" "Linux" "MAINTENANCE COMMANDS"
.SH NAME
dmsetup \(em low level logical volume management
.SH SYNOPSIS
.ad l
.B dmsetup clear
.I device_name
.br
.B dmsetup create
.I device_name
.RB [ \-u
.IR uuid ]
.RB [ \-n | \-\-notable | \-\-table
.RI < table >|
.RS
.IR table_file ]
.RB [{ \-\-addnodeoncreate | \-\-addnodeonresume }]
.RB [ \-\-readahead
.RI [ + ]< sectors >| auto | none ]
.RE
.br
.B dmsetup deps
.RB [ \-o
.IR options ]
.RI [ device_name ]
.br
.B dmsetup help
.RB [ \-c | \-C | \-\-columns ]
.br
.B dmsetup info
.RI [ device_name ]
.br
.B dmsetup info
.BR \-c | \-C | \-\-columns
.RB [ \-\-nameprefixes ]
.RB [ \-\-noheadings ]
.RB [ \-\-separator
.IR separator ]
.RS
.RB [ \-o
.IR fields ]
.RB [ \-O | \-\-sort
.IR sort_fields ]
.RB [ \-S | \-\-select
.IR Selection ]
.RB [ \-\-interval
.IR seconds ]
.RB [ \-\-count
.IR count ]
.RI [ device_name ]
.RE
.br
.B dmsetup load
.I device_name
.RB [ \-\-table
.RI < table >| table_file ]
.br
.B dmsetup ls
.RB [ \-\-target
.IR target_type ]
.RB [ \-\-exec
.IR command ]
.RB [ \-\-tree ]
.RS
.RB [ \-o
.IR options ]
.RE
.br
.B dmsetup message
.I device_name sector message
.br
.B dmsetup mknodes
.RI [ device_name ]
.br
.B dmsetup mangle
.RI [ device_name ]
.br
.B dmsetup reload
.I device_name
.RB [ \-\-table
.RI < table >| table_file ]
.br
.B dmsetup wipe_table
.I device_name
.br
.B dmsetup remove
.RB [ \-f | \-\-force ]
.RB [ \-\-retry ]
.RB [ \-\-deferred ]
.I device_name
.br
.B dmsetup remove_all
.RB [ \-f | \-\-force ]
.RB [ \-\-deferred ]
.br
.B dmsetup rename
.I device_name new_name
.br
.B dmsetup rename
.I device_name
.B \-\-setuuid
.I uuid
.br
.B dmsetup resume
.I device_name
.RB [{ \-\-addnodeoncreate | \-\-addnodeonresume }]
.RS
.RB [ \-\-readahead
.RI [ + ]< sectors >| auto | none ]
.RE
.br
.B dmsetup setgeometry
.I device_name cyl head sect start
.br
.B dmsetup splitname
.I device_name
.RI [ subsystem ]
.br
.B dmsetup status
.RB [ \-\-target
.IR target_type ]
.RB [ \-\-noflush ]
.RI [ device_name ]
.br
.B dmsetup suspend
.RB [ \-\-nolockfs ]
.RB [ \-\-noflush ]
.I device_name
.br
.B dmsetup table
.RB [ \-\-target
.IR target_type ]
.RB [ \-\-showkeys ]
.RI [ device_name ]
.br
.B dmsetup targets
.br
.B dmsetup udevcomplete
.I cookie
.br
.B dmsetup udevcomplete_all
.RI [ age_in_minutes ]
.br
.B dmsetup udevcookies
.br
.B dmsetup udevcreatecookie
.br
.B dmsetup udevflags
.I cookie
.br
.B dmsetup udevreleasecookie
.RI [ cookie ]
.br
.B dmsetup version
.br
.B dmsetup wait
.RB [ \-\-noflush ]
.I device_name
.RI [ event_nr ]
.br

.B devmap_name
.I major minor
.br
.B devmap_name
.I major:minor
.ad b
.SH DESCRIPTION
dmsetup manages logical devices that use the device-mapper driver.
Devices are created by loading a table that specifies a target for
each sector (512 bytes) in the logical device.

The first argument to dmsetup is a command.
The second argument is the logical device name or uuid.

Invoking the command as \fBdevmap_name\fP is equivalent to
.br
\fBdmsetup info \-c \-\-noheadings \-j \fImajor\fB \-m \fIminor\fP.
.SH OPTIONS
.TP
.B \-\-addnodeoncreate
Ensure /dev/mapper node exists after dmsetup create.
.TP
.B \-\-addnodeonresume
Ensure /dev/mapper node exists after dmsetup resume (default with udev).
.TP
.B \-\-checks
Perform additional checks on the operations requested and report
potential problems.  Useful when debugging scripts.
In some cases these checks may slow down operations noticeably.
.TP
.BR \-c | \-C | \-\-columns
Display output in columns rather than as Field: Value lines.
.TP
.B \-\-count \fIcount
Specify the number of times to repeat a report. Set this to zero
continue until interrupted.  The default interval is one second.
.TP
.BR \-h | \-\-help
Outputs a summary of the commands available, optionally including
the list of report fields (synonym with \fBhelp\fP command).
.TP
.B \-\-inactive
When returning any table information from the kernel report on the
inactive table instead of the live table.
Requires kernel driver version 4.16.0 or above.
.TP
.B \-\-interval \fIseconds
Specify the interval in seconds between successive iterations for
repeating reports. If \-\-interval is specified but \-\-count is not,
reports will continue to repeat until interrupted.
The default interval is one second.
.TP
.IR \fB\-\-manglename \ { none | hex | auto }
Mangle any character not on a whitelist using mangling_mode when
processing device-mapper device names and UUIDs. The names and UUIDs
are mangled on input and unmangled on output where the mangling mode
is one of:
\fInone\fP (no mangling),
\fIhex\fP (always do the mangling) and
\fIauto\fP (only do the mangling if not mangled yet, do nothing
if already mangled, error on mixed)
Default mode is \fI#DEFAULT_MANGLING#\fP.
Character whitelist: 0-9, A-Z, a-z, #+-.:=@_. This whitelist is
also supported by udev. Any character not on a whitelist is replaced
with its hex value (two digits) prefixed by \\x.
Mangling mode could be also set through
.B DM_DEFAULT_NAME_MANGLING_MODE
environment variable.
.TP
.BR \-j | \-\-major\ \fImajor
Specify the major number.
.TP
.BR \-m | \-\-minor\ \fIminor
Specify the minor number.
.TP
.BR \-n | \-\-notable
When creating a device, don't load any table.
.TP
.BR \-\-nameprefixes
Add a "DM_" prefix plus the field name to the output.  Useful with --noheadings to produce a list of
field=value pairs that can be used to set environment variables (for example, in udev(7) rules).
.TP
.BR \-\-noheadings
Suppress the headings line when using columnar output.
.TP
.B \-\-noopencount
Tell the kernel not to supply the open reference count for the device.
.TP
.B \-\-noudevrules
Do not allow udev to manage nodes for devices in device-mapper directory.
.TP
.B \-\-noudevsync
Do not synchronise with udev when creating, renaming or removing devices.
.TP
.BR \-o | \-\-options
Specify which fields to display.
.TP
.IR \fB\-\-readahead \ [ + ]< sectors >| auto | none
Specify read ahead size in units of sectors.
The default value is \fIauto\fP which allows the kernel to choose
a suitable value automatically.  The \fI+\fP prefix lets you
specify a minimum value which will not be used if it is
smaller than the value chosen by the kernel.
The value \fInone\fP is equivalent to specifying zero.
.TP
.BR \-r | \-\-readonly
Set the table being loaded read-only.
.TP
.BR \-S | \-\-select \ \fISelection
Display only rows that match Selection criteria. All rows are displayed
with the additional "selected" column (-o selected) showing 1 if the row
matches the Selection and 0 otherwise. The Selection criteria are defined
by specifying column names and their valid values while making use of
supported comparison operators. As a quick help and to see full list of
column names that can be used in Selection and the set of supported
selection operators, check the output of \fBdmsetup info -c -S help\fP
command.
.TP
.IR \fB\-\-table \ < table >
Specify a one-line table directly on the command line.
.TP
.B \-\-udevcookie \fIcookie
Use cookie for udev synchronisation.
Note: Same cookie should be used for same type of operations i.e. creation of
multiple different devices. It's not adviced to combine different
operations on the single device.
.TP
.BR \-u | \-\-uuid
Specify the uuid.
.TP
.BR \-y | \-\-yes
Answer yes to all prompts automatically.
.TP
.BR \-v | \-\-verbose \ [ \-v | \-\-verbose ]
Produce additional output.
.TP
.B \-\-verifyudev
If udev synchronisation is enabled, verify that udev operations get performed
correctly and try to fix up the device nodes afterwards if not.
.TP
.B \-\-version
Display the library and kernel driver version.
.br
.SH COMMANDS
.TP
.B clear
.I device_name
.br
Destroys the table in the inactive table slot for device_name.
.br
.TP
.B create
.I device_name
.RB [ \-u
.IR uuid ]
.RB [ \-n | \-\-notable | \-\-table
.RI < \fItable >| table_file ]
.RB [{ \-\-addnodeoncreate | \-\-addnodeonresume }]
.RB [ \-\-readahead
.RI [ + ]< sectors >| auto | none ]
.br
Creates a device with the given name.
If table_file or <table> is supplied, the table is loaded and made live.
Otherwise a table is read from standard input unless \fB\-\-notable\fP is used.
The optional uuid can be used in place of
device_name in subsequent dmsetup commands.
If successful a device will appear as
/dev/mapper/<device-name>.
See below for information on the table format.
.br
.TP
.B deps
.RB [ \-o
.IR options ]
.RI [ device_name ]
.br
Outputs a list of devices referenced by the live table for the specified
device. Device names on output can be customised by following options:
devno (major and minor pair, used by default), blkdevname (block device name),
devname (map name for device-mapper devices, equal to blkdevname otherwise).
.br
.TP
.B help
.RB [ \-c | \-C | \-\-columns ]
.br
Outputs a summary of the commands available, optionally including
the list of report fields.
.br
.TP
.B info
.RI [ device_name ]
.br
Outputs some brief information about the device in the form:
.RS
.RS
 State: SUSPENDED|ACTIVE, READ-ONLY
 Tables present: LIVE and/or INACTIVE
 Open reference count
 Last event sequence number (used by \fBwait\fP)
 Major and minor device number
 Number of targets in the live table
 UUID
.RE
.RE
.br
.TP
.B info
.BR \-c | \-C | \-\-columns
.RB [ \-\-noheadings ]
.RB [ \-\-separator
.IR separator ]
.RB [ \-o
.IR fields ]
.RB [ \-O | \-\-sort
.IR sort_fields ]
.RB [ \-\-interval
.IR seconds ]
.RB [ \-\-count
.IR count ]
.RI [ device_name ]
.br
Output you can customise.
Fields are comma-separated and chosen from the following list:
name, major, minor, attr, open, segments, events, uuid.
Attributes are: (L)ive, (I)nactive, (s)uspended, (r)ead-only, read-(w)rite.
Precede the list with '+' to append
to the default selection of columns instead of replacing it.
Precede any sort_field with - for a reverse sort on that column.
.br
.TP
.B ls
.RB [ \-\-target
.IR target_type ]
.RB [ \-\-exec
.IR command ]
.RB [ \-\-tree ]
.RB [ \-o
.IR options ]
.br
List device names.  Optionally only list devices that have at least
one target of the specified type.  Optionally execute a command for
each device.  The device name is appended to the supplied command.
Device names on output can be customised by following options: devno (major
and minor pair, used by default), blkdevname (block device name),
devname (map name for device-mapper devices, equal to blkdevname otherwise).
\fB\-\-tree\fP displays dependencies between devices as a tree.
It accepts a comma-separate list of options.
Some specify the information displayed against each node:
device/nodevice; blkdevname; active, open, rw, uuid.
Others specify how the tree is displayed:
ascii, utf, vt100; compact, inverted, notrunc.
.br
.HP
.BR load | reload
.I device_name
.RB [ \-\-table
.RI < table >| table_file ]
.br
Loads <table> or table_file into the inactive table slot for device_name.
If neither is supplied, reads a table from standard input.
.br
.HP
.B wipe_table
.I device_name
.br
Wait for any I/O in-flight through the device to complete, then
replace the table with a new table that fails any new I/O
sent to the device.  If successful, this should release any devices
held open by the device's table(s).
.br
.HP
.B message
.I device_name sector message
.br
Send message to target. If sector not needed use 0.
.br
.HP
.B mknodes
.RI [ device_name ]
.br
Ensure that the node in /dev/mapper for device_name is correct.
If no device_name is supplied, ensure that all nodes in /dev/mapper
correspond to mapped devices currently loaded by the device-mapper kernel
driver, adding, changing or removing nodes as necessary.
.br
.HP
.B mangle
.RI [ device_name ]
.br
Ensure existing device-mapper device name and UUID is in the correct mangled
form containing only whitelisted characters (supported by udev) and do
a rename if necessary. Any character not on the whitelist will be mangled
based on the \fB\-\-manglename\fP setting. Automatic rename works only for device
names and not for device UUIDs because the kernel does not allow changing
the UUID of active devices. Any incorrect UUIDs are reported only and they
must be manually corrected by deactivating the device first and then
reactivating it with proper mangling mode used (see also \fB\-\-manglename\fP).
.br
.HP
.B remove
.RB [ \-f | \-\-force ]
.RB [ \-\-retry ]
.RB [ \-\-deferred ]
.I device_name
.br
Removes a device.  It will no longer be visible to dmsetup.  Open devices
cannot be removed, but adding \fB\-\-force\fP will replace the table with one
that fails all I/O.  \fB\-\-deferred\fP will enable deferred removal of open
devices - the device will be removed when the last user closes it. The deferred
removal feature is supported since version 4.27.0 of the device-mapper
driver available in upstream kernel version 3.13.  (Use \fBdmsetup version\fP
to check this.)  If an attempt to remove a device fails, perhaps because a process run
from a quick udev rule temporarily opened the device, the \fB\-\-retry\fP
option will cause the operation to be retried for a few seconds before failing.
Do NOT combine
\fB\-\-force\fP and \fB\-\-udevcookie\fP, as udev may start to process udev
rules in the middle of error target replacement and result in nondeterministic
result.
.br
.HP
.B remove_all
.RB [ \-f | \-\-force ]
.RB [ \-\-deferred ]
.br
Attempts to remove all device definitions i.e. reset the driver.  This also runs
\fBmknodes\fP afterwards.  Use with care!  Open devices cannot be removed, but
adding \fB\-\-force\fP will replace the table with one that fails all I/O.
\fB\-\-deferred\fP will enable deferred removal of open devices - the device
will be removed when the last user closes it.  The deferred removal feature is
supported since version 4.27.0 of the device-mapper driver available in
upstream kernel version 3.13. 
.br
.HP
.B rename
.I device_name new_name
.br
Renames a device.
.br
.HP
.B rename
.I device_name
.B \-\-setuuid
.I uuid
.br
Sets the uuid of a device that was created without a uuid.
After a uuid has been set it cannot be changed.
.br
.TP
.B resume
.I device_name
.RB [{ \-\-addnodeoncreate | \-\-addnodeonresume }]
.RB [ \-\-readahead
.RI [ + ]< sectors >| auto | none ]
.br
Un-suspends a device.
If an inactive table has been loaded, it becomes live.
Postponed I/O then gets re-queued for processing.
.br
.TP
.B setgeometry \fIdevice_name cyl head sect start
.br
Sets the device geometry to C/H/S.
.br
.HP
.B splitname
.I device_name
.RI [ subsystem ]
.br
Splits given device name into subsystem constituents.
The default subsystem is LVM.  
LVM currently generates device names by concatenating the names of the Volume
Group, Logical Volume and any internal Layer with a hyphen as separator.
Any hyphens within the names are doubled to escape them.
The precise encoding might change without notice in any future
release, so we recommend you always decode using the current version of
this command.
.br
.TP
.B status
.RB [ \-\-target
.IR target_type ]
.RB [ \-\-noflush ]
.RI [ device_name ]
.br
Outputs status information for each of the device's targets.
With \fB\-\-target\fP, only information relating to the specified target type
any is displayed.  With \fB\-\-noflush\fP, the thin target (from version 1.3.0)
doesn't commit any outstanding changes to disk before reporting its statistics.
.br
.HP
.B suspend
.RB [ \-\-nolockfs ]
.RB [ \-\-noflush ]
.I device_name
.br
Suspends a device.  Any I/O that has already been mapped by the device
but has not yet completed will be flushed.  Any further I/O to that
device will be postponed for as long as the device is suspended.
If there's a filesystem on the device which supports the operation,
an attempt will be made to sync it first unless \fB\-\-nolockfs\fP is specified.
Some targets such as recent (October 2006) versions of multipath may support
the \fB\-\-noflush\fP option.  This lets outstanding I/O that has not yet reached the
device to remain unflushed.
.br
.TP
.B table
.RB [ \-\-target
.IR target_type ]
.RB [ \-\-showkeys ]
.RI [ device_name ]
.br
Outputs the current table for the device in a format that can be fed
back in using the create or load commands.
With \fB\-\-target\fP, only information relating to the specified target type
is displayed.
Encryption keys are suppressed in the table output for the crypt
target unless the \fB\-\-showkeys\fP parameter is supplied.
.br
.TP
.B targets
.br
Displays the names and versions of the currently-loaded targets.
.br
.HP
.B udevcomplete
.I cookie
.br
Wake any processes that are waiting for udev to complete processing the specified cookie.
.br
.HP
.B udevcomplete_all
.RI [ age_in_minutes ]
.br
Remove all cookies older than the specified number of minutes.
Any process waiting on a cookie will be resumed immediately.
.br
.HP
.B udevcookies
.br
List all existing cookies. Cookies are system-wide semaphores with keys
prefixed by two predefined bytes (0x0D4D).
.br
.TP
.B udevcreatecookie
.br
Creates a new cookie to synchronize actions with udev processing.
The output is a cookie value. Normally we don't need to create cookies since
dmsetup creates and destroys them for each action automatically. However, we can
generate one explicitly to group several actions together and use only one
cookie instead. We can define a cookie to use for each relevant command by using
\fB\-\-udevcookie\fP option. Alternatively, we can export this value into the environment
of the dmsetup process as \fBDM_UDEV_COOKIE\fP variable and it will be used automatically
with all subsequent commands until it is unset.
Invoking this command will create system-wide semaphore that needs to be cleaned
up explicitly by calling udevreleasecookie command.
.br
.HP
.B udevflags
.I cookie
.br
Parses given cookie value and extracts any udev control flags encoded.
The output is in environment key format that is suitable for use in udev
rules. If the flag has its symbolic name assigned then the output is
DM_UDEV_FLAG_<flag_name>='1', DM_UDEV_FLAG<flag_position>='1' otherwise.
Subsystem udev flags don't have symbolic names assigned and these ones are
always reported as DM_SUBSYSTEM_UDEV_FLAG<flag_position>='1'. There are
16 udev flags altogether.
.br
.HP
.B udevreleasecookie
.RI [ cookie ]
.br
Waits for all pending udev processing bound to given cookie value and clean up
the cookie with underlying semaphore. If the cookie is not given directly,
the command will try to use a value defined by \fBDM_UDEV_COOKIE\fP environment variable.
.br
.TP
.B version
.br
Outputs version information.

.TP
.B wait
.RB [ \-\-noflush ]
.I device_name
.RI [ event_nr ]
.br
Sleeps until the event counter for device_name exceeds event_nr.
Use \fB\-v\fP to see the event number returned.
To wait until the next event is triggered, use \fBinfo\fP to find
the last event number.
With \fB\-\-noflush\fP, the thin target (from version 1.3.0) doesn't commit
any outstanding changes to disk before reporting its statistics.
.SH TABLE FORMAT
Each line of the table specifies a single target and is of the form:
.P
.I logical_start_sector num_sectors
.B target_type
.RI < target_args >
.P
Simple target types and <target_args> include:
.HP
.B linear
.I destination_device start_sector
.br
The traditional linear mapping.
.HP
.B striped
.I num_stripes chunk_size
.RI [ destination
.IR start_sector ]+
.br
Creates a striped area.
.br
e.g. striped 2 32 /dev/hda1 0 /dev/hdb1 0
will map the first chunk (16k) as follows:
.RS
.RS
 LV chunk 1 -> hda1, chunk 1
 LV chunk 2 -> hdb1, chunk 1
 LV chunk 3 -> hda1, chunk 2
 LV chunk 4 -> hdb1, chunk 2
 etc.
.RE
.RE
.TP
.B error
.br
Errors any I/O that goes to this area.  Useful for testing or
for creating devices with holes in them.
.TP
.B zero
.br
Returns blocks of zeroes on reads.  Any data written is discarded silently.
This is a block-device equivalent of the /dev/zero character-device data sink
described in \fBnull\fP(4).
.P
More complex targets include:
.TP
.B crypt
.br
Transparent encryption of block devices using the kernel crypto API.
.TP
.B delay
.br
Delays reads and/or writes to different devices.  Useful for testing.
.TP
.B flakey
.br
Creates a similar mapping to the linear target but
exhibits unreliable behaviour periodically.
Useful for simulating failing devices when testing.
.TP
.B mirror
.br
Mirrors data across two or more devices.
.HP
.B multipath
.br
Mediates access through multiple paths to the same device.
.TP
.BR raid
.br
Offers an interface to the kernel's software raid driver, md.
.HP
.B snapshot
.br
Supports snapshots of devices.
.P
To find out more about the various targets and their table formats and status
lines, please read the files in the Documentation/device-mapper directory in
the kernel source tree.
(Your distribution might include a copy of this information in the
documentation directory for the device-mapper package.)

.SH EXAMPLES

# A table to join two disks together
.br
.br
0 1028160 linear /dev/hda 0
.br
1028160 3903762 linear /dev/hdb 0


# A table to stripe across the two disks,
.br
# and add the spare space from
.br
# hdb to the back of the volume

0 2056320 striped 2 32 /dev/hda 0 /dev/hdb 0
.br
2056320 2875602 linear /dev/hdb 1028160

.SH ENVIRONMENT VARIABLES
.TP
.B DM_DEV_DIR
The device directory name.
Defaults to "/dev" and must be an absolute path.
.TP
.B DM_UDEV_COOKIE
A cookie to use for all relevant commands to synchronize with udev processing.
It is an alternative to using \fB\-\-udevcookie\fP option.
.TP
.B DM_DEFAULT_NAME_MANGLING_MODE
A default mangling mode. Defaults to "\fI#DEFAULT_MANGLING#\fP"
and it is an alternative to using \fB\-\-manglename\fP option.

.SH AUTHORS
Original version: Joe Thornber (thornber@redhat.com)

.SH SEE ALSO
LVM2 resource page https://www.sourceware.org/lvm2/
.br
Device-mapper resource page: http://sources.redhat.com/dm/
