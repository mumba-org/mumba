//
// Copyright 2019 ZetaSQL Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// WARNING: The annotations in this file are intended for use by engine
// implementors.  They are not generally useful for end-users.  They will
// have no effect on zetasql query behavior.
//
// See type_annotation.proto for the annotations that are user-visible and
// are supported at query time.
//
// This file contains additional proto annotations that can be used to
// generate protos that can represent more zetasql types, including structs,
// with full support for SQL-style NULLs.
//
// These annotations can be used internally by engines to generate proto
// messages as wire formats for zetasql types.
//
// These annotations are NOT used during regular zetasql analysis.
// When queries extract a proto field that has these annotations, the
// annotations will be ignored and the returned field type will be the
// raw proto type of the field.
//
// LINT: LEGACY_NAMES

syntax = "proto2";

package zetasql;

import "google/protobuf/descriptor.proto";

option java_package = "com.google.zetasql";
option java_outer_classname = "WireFormatAnnotationProto";

extend google.protobuf.FieldOptions {
  // Indicate that when the containing proto is interpreted as a STRUCT type
  // (because it has an is_struct annotation), this field should have this name
  // in the STRUCT type.  An empty string means this is an anonymous field.
  //
  // This is used when converting a STRUCT type to a proto to support
  // anonymous fields and fields with duplicate names.
  //
  // NOTE: This is NOT interpreted at query time by zetasql.
  optional string struct_field_name = 69661525;

  // Indicate that a message field should be interpreted directly as the
  // contained message type, without processing any message-level annotations.
  //
  // When this is set, message fields will always be interpreted as PROTO type,
  // using the exact proto type from the Descriptor, ignoring any message-level
  // annotations (like is_struct or is_wrapper).
  //
  // This annotation has no effect on fields with non-message types.
  //
  // NOTE: This is NOT interpreted at query time by zetasql.
  optional bool is_raw_proto = 163760138;
}

enum TableType {
  // No TableType annotation.
  // This is meant as a no-annotation marker in code and should not actually
  // be written as an annotation in .proto files.
  DEFAULT_TABLE_TYPE = 0;

  // A normal SQL table, where each row has columns, and each column
  // has a name and a type.
  SQL_TABLE = 1;

  // A value table, where each row has a row type, and the row is just a
  // value of that type, and there is no column name.
  // See (broken link).
  VALUE_TABLE = 2;
}

extend google.protobuf.MessageOptions {
  // Indicate that this message definition is meant as a wrapper object.
  // Normally used to make a contained field nullable.
  //
  // The message should have exactly one field.
  //
  // When interpreting a field with this message type, the wrapper
  // message will be skipped and the contained field's value will be used
  // instead.  If the wrapper is not present, the value is NULL.  If the
  // wrapper is present, the value may also be NULL if the field inside
  // can store NULL values.  Multiple layers of wrappers are allowed.
  //
  // When a field is accessed using has_<field>, this annotation is ignored.
  // has_<field> checks presence of a proto field, not null-ness of a
  // zetasql value.
  //
  // Some examples:
  //
  //   message NullableInt {
  //     option (zetasql.is_wrapper) = true;
  //     optional int32 value [ (zetasql.use_defaults) = false ] = 1;
  //   };
  //   message ArrayOfInt {
  //     option (zetasql.is_wrapper) = true;
  //     repeated int32 value = 1;
  //   }
  //   message ArrayOfNullableInt {
  //     option (zetasql.is_wrapper) = true;
  //     repeated NullableInt value = 1;
  //   }
  //
  // These all have zetasql type int32.
  //   //   Cannot store NULL.
  //   optional int32 int = 1;
  //   //   Stores NULL if not present.
  //   optional int32 nullable_int [ (zetasql.use_defaults) = false ] = 2;
  //   //   Stores NULL if not present or the contained field is not present.
  //   optional NullableInt nullable_int = 3;
  //
  // These all have zetasql type ARRAY<int32>.
  //   //   Array non-nullable, elements non-nullable.
  //   repeated int32 array_of_int = 1;
  //   //   Array non-nullable, elements nullable.
  //   repeated NullableInt array_of_nullable_int = 2;
  //   //   Array nullable, elements non-nullable.
  //   optional ArrayOfInt nullable_array_of_int = 3;
  //   //   Array nullable, elements nullable.
  //   optional ArrayOfNullableInt nullable_array_of_nullable_int = 4;
  //
  // NOTE: This is NOT interpreted at query time by zetasql.
  optional bool is_wrapper = 49730018;

  // Indicate that this proto message should be treated as an anonymous STRUCT
  // type when imported into ZetaSQL.
  //
  // This can be used when a ZetaSQL STRUCT type is exported as a protocol
  // buffer, using a generated protocol buffer descriptor.  When that type
  // is imported back into ZetaSQL, it should become a STRUCT type again,
  // rather than a PROTO type with the name of the generated proto.
  // Struct fields will be ordered in field definition order.
  //
  // Marking a message with is_struct = true does not imply
  // use_field_defaults = false.  The default is still to materialize
  // protocol buffer defaults before converting the value to STRUCT.
  //
  // Example:
  //
  //   message MyKeyValueStruct {
  //     option (zetasql.is_struct) = true;
  //     optional string key = 1;
  //     optional int64 value = 2;
  //   }
  //   // ZetaSQL will interpret this field as ARRAY<STRUCT(string,int64)>.
  //   repeated MyKeyValueStruct keys;
  //
  // NOTE: This is NOT interpreted at query time by zetasql.
  optional bool is_struct = 49727810;

  // Indicates that this proto represents a ZetaSQL table, and indicates
  // whether it is a regular SQL table or a value table.
  //
  // This annotation is used on the top-level proto used to represent a table's
  // row type when a ZetaSQL table is encoded as a proto for storage.
  // This annotation indicates whether the table should be interpreted as a
  // regular table or a value table. This annotation is ignored on non-top-level
  // protos, and is never used or interpreted at query time by zetasql.
  //
  // If table_type=VALUE_TABLE, then the table is a value table, with
  //   proto type by default.  If is_struct is set, the table is a struct
  //   value table.  If is_wrapper is set, the value type is the wrapped type.
  // If table_type=SQL_TABLE, then this table is always a SQL table.
  //   The proto must also have is_struct.  The computed struct type is
  //   flattened into columns.  is_wrapper is not allowed in this case.
  // If table_type is not set, then
  //   If the proto has is_wrapper or is_struct, the table is a value table.
  //   Otherwise, the proto represents a proto, but not one written as a
  //   ZetaSQL table.  Engines should treat the table as a proto value table.
  //
  // Note: When a file is written for a proto value table using a user's proto,
  // a table_type=VALUE_TABLE annotation should be added into the proto so the
  // file can be identified as a ZetaSQL table.  At read time, that annotation
  // should be stripped to get back to the user's original proto.
  optional TableType table_type = 86830980;
}

// This is a hack so that the generated module has at least one Descriptor in
// it, so code that needs to reference this module can use that Descriptor to
// get a reference to the file's FileDescriptor.
// Otherwise, this should not be used.
message WireFormatAnnotationEmptyMessage {}
