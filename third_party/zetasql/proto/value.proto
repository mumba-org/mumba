//
// Copyright 2019 ZetaSQL Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// LINT: LEGACY_NAMES
syntax = "proto2";

package zetasql;

import "google/protobuf/timestamp.proto";

option cc_enable_arenas = true;
option java_package = "com.google.zetasql";
option java_outer_classname = "ZetaSQLValue";

// ValueProto represents the serialized form of the zetasql::Value.
// Unlike zetasql::Value, ValueProto does not carry full type information with
// every instance, and therefore can only be fully interpreted with accompanying
// TypeProto.
message ValueProto {
  // An ordered collection of elements of arbitrary count.
  message Array {
    repeated ValueProto element = 1;
  }

  // A collection of fields. The count, order, and type of the fields is
  // determined by the type associated with this value.
  message Struct {
    repeated ValueProto field = 1;
  }

  message Datetime {
    // Represents bit field encoding of year/month/day/hour/minute/second.
    // See class DatetimeValue in civil_time.h for details of encoding.
    optional int64 bit_field_datetime_seconds = 1;

    // Non-negative fractions of a second at nanosecond resolution.
    optional int32 nanos = 2;
  }

  // Each non-null value will have exactly one of these fields specified.
  // Null values will have no fields set.
  oneof value {
    int32 int32_value = 1;
    int64 int64_value = 2;
    uint32 uint32_value = 3;
    uint64 uint64_value = 4;
    bool bool_value = 5;
    float float_value = 6;
    double double_value = 7;
    string string_value = 8;
    bytes bytes_value = 9;
    int32 date_value = 10;
    // Tag 11 was used for specifying micros timestamps as int64, now obsolete.
    int32 enum_value = 12;
    Array array_value = 13;
    Struct struct_value = 14;
    // Stores a serialized protocol message.
    bytes proto_value = 15;
    google.protobuf.Timestamp timestamp_value = 16;
    Datetime datetime_value = 17;
    // Bit field encoding of hour/minute/second/nanos. See TimeValue class for
    // details.
    int64 time_value = 18;
    // Geography encoded using ::stlib::STGeographyEncoder
    bytes geography_value = 19;
    // Encoded numeric value. For the encoding format see documentation for
    // NumericValue::SerializeToProtoBytes().
    bytes numeric_value = 20;
    // User code that switches on this oneoff enum must have a default case so
    // builds won't break when new fields are added.
    bool __ValueProto__switch_must_have_a_default = 255;
  }
}
