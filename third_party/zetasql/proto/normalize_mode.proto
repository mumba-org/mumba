//
// Copyright 2019 ZetaSQL Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package zetasql.functions;

option java_package = "com.google.zetasql.functions";
option java_outer_classname = "ZetaSQLNormalizeMode";

// Enum that defines the modes used for normalizing Unicode string under
// two formal types of equivalence between characters
// (see http://www.unicode.org/reports/tr15/#Canon_Compat_Equivalence):
// - Canonical equivalence, is a fundamental equivalence between characters or
//   sequences of characters which represent the same abstract character, and
//   which when correctly displayed should always have the same visual
//   appearance and behavior.
// - Compatibility equivalence, is a weaker type of equivalence between
//   characters or sequences of characters which represent the same abstract
//   character (or sequence of abstract characters), but which may have
//   distinct visual appearances or behaviors.
//
// In the following modes, 'C' stands for Composition (e.g. narrow multiple code
// points to one), 'D' stands for Decomposition (expand one char to multiple
// code points) and 'K' stands for Compatibility (using K is to avoid confusion
// because C is already taken).
// Simply put:
// - The difference between NFC and NFKC is that in NFKC character like "™" are
//   equivalent to "TM", but not in NFC.
// - The difference between NFC and NFD is that NFC collapses the
//   multi-codepoint sequences like "e ́ "  into "é", while NFD explodes single
//   character like "é" into multiple codepoints "e ́ ".
//
// In all normalized forms, canonically equivalent characters will have the
// same binary encoding. NFC and NFD normalized forms can be compared to check
// canonical equivalence. NFKC and NFKD provide looser matching, where
// compatible characters will also be equal.
enum NormalizeMode {
  // Normalization Form Canonical Composition.
  // NFC is the default one if a mode is not explicitly specified.
  NFC = 0;

  // Normalization Form Compatibility Composition.
  NFKC = 1;

  // Normalization Form Canonical Decomposition.
  NFD = 2;

  // Normalization Form Compatibility Decomposition.
  NFKD = 3;
}
