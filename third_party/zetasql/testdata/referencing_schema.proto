//
// Copyright 2019 ZetaSQL Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package zetasql_test;

import "zetasql/testdata/referenced_schema.proto";
import "zetasql/testdata/test_schema.proto";

message TestReferencingPB {
  optional TestEnum test_enum = 1;
  optional KitchenSinkPB kitchen_sink = 2;
}

message TestExtensionPB {
  extend TestExtraPB {
    optional TestOptionalFields additional_fields = 10323133;
  }
}

message TestNestedReferencingEnumPB {
  message NestedReferencingEnumPB {
    optional TestEnum test_enum = 1;
  }
  repeated NestedReferencingEnumPB referencing_enum = 1;
}

message TestNestedReferencingPB {
  message NestedReferencingPB {
    optional KitchenSinkPB kitchen_sink = 1;
    optional int64 int_col = 2;
  }
  optional NestedReferencingPB referencing_kitchen_sink = 1;
}

message AnotherReferencingPB {
  optional TestReferencedEnum referenced_enum = 1;
  optional TestReferencedPB referenced_pb = 2;
}

message TestTopLevelPB {
  message TestNestedPB {
    optional int64 nested_int64 = 1;
    enum TestNestedEnum {
      NESTED_ENUM_0 = 0;
      NESTED_ENUM_1 = 1;
    }
    optional TestNestedEnum nested_enum = 2;
    enum TestNestedEnum2 {
      NESTED_ENUM_2_2 = 2;
      NESTED_ENUM_2_3 = 3;
    }
    optional TestNestedEnum2 nested_enum_two = 3;
    message TestDoublyNestedPB {
      optional string doubly_nested_string = 1;
      enum TestDoublyNestedEnum {
        DOUBLY_NESTED_ENUM_0 = 0;
        DOUBLY_NESTED_ENUM_1 = 1;
      }
      optional int64 doubly_nested_int64 = 2;
      message TestTriplyNestedPB {
        optional int64 triply_nested_int64 = 1;
        enum TestTriplyNestedEnum {
          TRIPLY_NESTED_ENUM_0 = 0;
          TRIPLY_NESTED_ENUM_1 = 1;
        }
        optional TestTriplyNestedEnum triply_nested_enum = 2;
      }
      optional TestTriplyNestedPB triply_nested = 3;
    }
    message TestDoublyNested2PB {
      optional string doubly_nested_two_string = 1;
    }
    optional TestDoublyNestedPB double_nested = 4;
    optional TestDoublyNested2PB double_nested_two = 5;
  }
  optional TestNestedPB test_nested = 1;
}
