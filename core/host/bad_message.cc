// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "core/host/bad_message.h"

#include "base/bind.h"
#include "base/debug/dump_without_crashing.h"
#include "base/logging.h"
#include "base/metrics/histogram_functions.h"
#include "base/strings/string_number_conversions.h"
#include "core/host/host_message_filter.h"
#include "core/host/host_thread.h"
#include "core/host/application/application_process_host.h"

namespace host {
namespace bad_message {

namespace {

void LogBadMessage(BadMessageReason reason) {
  static auto* bad_message_reason = base::debug::AllocateCrashKeyString(
      "bad_message_reason", base::debug::CrashKeySize::Size32);

  LOG(ERROR) << "Terminating renderer for bad IPC message, reason " << reason;
  base::UmaHistogramSparse("Stability.BadMessageTerminated.Content", reason);
  base::debug::SetCrashKeyString(bad_message_reason, base::IntToString(reason));
}

void ReceivedBadMessageOnUIThread(int render_process_id,
                                   BadMessageReason reason) {
  DCHECK(HostThread::CurrentlyOn(HostThread::UI));
  ApplicationProcessHost* host = ApplicationProcessHost::FromID(render_process_id);
  if (!host)
    return;

  // A dump has already been generated by the caller. Don't generate another.
  host->Shutdown(reason);//ForBadMessage(
      //ApplicationProcessHost::CrashReportMode::NO_CRASH_DUMP);
}

}  // namespace

void ReceivedBadMessage(ApplicationProcessHost* host, BadMessageReason reason) {
   LogBadMessage(reason);
   host->Shutdown(reason);//ForBadMessage();
       //ApplicationProcessHost::CrashReportMode::GENERATE_CRASH_DUMP);
}

 void ReceivedBadMessage(int render_process_id, BadMessageReason reason) {
   // We generate a crash dump here since generating one after posting to the UI
   // thread is less useful.
   LogBadMessage(reason);
   base::debug::DumpWithoutCrashing();

   if (!HostThread::CurrentlyOn(HostThread::UI)) {
     HostThread::PostTask(HostThread::UI, FROM_HERE,
                             base::BindOnce(&ReceivedBadMessageOnUIThread,
                                            render_process_id, reason));
     return;
   }
   ReceivedBadMessageOnUIThread(render_process_id, reason);
}

void ReceivedBadMessage(HostMessageFilter* filter, BadMessageReason reason) {
  LogBadMessage(reason);
  filter->ShutdownForBadMessage();
}

base::debug::CrashKeyString* GetMojoErrorCrashKey() {
  static auto* crash_key = base::debug::AllocateCrashKeyString(
      "mojo-message-error", base::debug::CrashKeySize::Size256);
  return crash_key;
}

base::debug::CrashKeyString* GetKilledProcessOriginLockKey() {
  static auto* crash_key = base::debug::AllocateCrashKeyString(
      "killed_process_origin_lock", base::debug::CrashKeySize::Size64);
  return crash_key;
}

base::debug::CrashKeyString* GetRequestedSiteURLKey() {
  static auto* crash_key = base::debug::AllocateCrashKeyString(
      "requested_site_url", base::debug::CrashKeySize::Size64);
  return crash_key;
}

}  // namespace bad_message
}  // namespace host
